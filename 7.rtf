{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 7: block scope - let\
// To do: make all tests pass, leave the asserts unchanged!\
\
\cf4 describe(\cf5 '`let` restricts the scope of the variable to the current block'\cf6 , \cf4 () => \{\
\
  describe(\cf5 '`let` vs. `var`'\cf6 , \cf4 () => \{\
\
    it(\cf5 '`var` works as usual'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 if 
\f0\b0 \cf4 (
\f1\b \cf6 true
\f0\b0 \cf4 ) \{\
        
\f1\b \cf6 var 
\f0\b0 \cf4 varX = 
\f1\b \cf6 true
\f0\b0 ;\
      \cf4 \}\
      assert.equal(varX\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 '`let` restricts scope to inside the block'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 if 
\f0\b0 \cf4 (
\f1\b \cf6 true
\f0\b0 \cf4 ) \{\
        
\f1\b \cf6 let 
\f0\b0 \cf4 letX = 
\f1\b \cf6 true
\f0\b0 ;\
      \cf4 \}\
      assert.throws(() => console.log(letX))\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 '`let` usage'\cf6 , \cf4 () => \{\
    \
    it(\cf5 '`let` use in `for` loops'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{x: \cf7 1\cf4 \}\cf6 ;\
      
\f1\b for 
\f0\b0 \cf4 (
\f1\b \cf6 let 
\f0\b0 \cf4 key 
\f1\b \cf6 in 
\f0\b0 \cf4 obj) \{\}\
      assert.throws(() => console.log(key))\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'create artifical scope, using curly braces'\cf6 , \cf4 () => \{\
      \{\
        
\f1\b \cf6 let 
\f0\b0 \cf4 letX = 
\f1\b \cf6 true
\f0\b0 ;\
      \cf4 \}\
      assert.throws(() => console.log(letX))\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}