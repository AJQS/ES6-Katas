{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 41: array - entries\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`[].entries()` returns an iterator object with all entries'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  it(\cf5 'returns key+value for each element'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 arr = [\cf5 'a'\cf6 , \cf5 'b'\cf6 , \cf5 'c'\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 entriesAsArray = Array.from(arr.entries())\cf6 ;\
    \
    \cf4 assert.deepEqual(entriesAsArray\cf6 , \cf4 [[\cf7 0\cf6 ,\cf5 "a"\cf4 ]\cf6 , \cf4 [\cf7 1\cf6 ,\cf5 "b"\cf4 ]\cf6 , \cf4 [\cf7 2\cf6 ,\cf5 "c"\cf4 ]])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'empty elements contain the value `undefined`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 arr = [\cf5 'one'\cf4 ]\cf6 ;\
    \cf4 arr[\cf7 2\cf4 ] = \cf5 'three'\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 secondValue = Array.from(arr.entries())[\cf7 1\cf4 ]\cf6 ;\
    \
    \cf4 assert.deepEqual(secondValue\cf6 , \cf4 [\cf7 1\cf6 , 
\f1\b void 
\f0\b0 \cf7 0\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'returns an iterable'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'has `next()` to iterate'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 arr = [\cf5 'one'\cf4 ]\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 value = arr.entries().next().value\cf6 ;\
      \
      \cf4 assert.deepEqual(value\cf6 , \cf4 [\cf7 0\cf6 , \cf5 'one'\cf4 ])\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}