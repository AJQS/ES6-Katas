{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh21000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 26: class - more-extends\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'class can inherit from another'\cf6 , \cf4 () => \{\
\
  it(\cf5 'extend an `old style` "class", a function, still works'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 A = 
\f1\b \cf6 function
\f0\b0 \cf4 ()\{\}\cf6 ;\
    
\f1\b class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{\}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B() 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 A\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'prototypes are as you know them'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{\}\
    it(\cf5 'A is the prototype of B'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 isIt = A.isPrototypeOf(B)\cf6 ;\
      \cf4 assert.equal(isIt\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'A`s prototype is also B`s prototype'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 proto = B.prototype\cf6 ;\
      \cf2 // Remember: don't touch the assert!!! :)\
      \cf4 assert.equal(A.prototype.isPrototypeOf(proto)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 '`extends` using an expression'\cf6 , \cf4 () => \{\
    it(\cf5 'eg the inline assignment of the parent class'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 A\cf6 ;\
      
\f1\b class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 (A = 
\f1\b \cf6 class 
\f0\b0 \cf4 \{\}) \{\}\
      \
      assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B() 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 A\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'or calling a function that returns the parent class'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 returnParent = (beNull) => beNull ? 
\f1\b \cf6 null 
\f0\b0 \cf4 : 
\f1\b \cf6 class 
\f0\b0 \cf4 \{\}\cf6 ;\
      
\f1\b class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 (returnParent(
\f1\b \cf6 true
\f0\b0 \cf4 )) \{\}\
      \
      assert.equal(Object.getPrototypeOf(B.prototype)\cf6 , 
\f1\b null
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}