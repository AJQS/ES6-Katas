{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh21000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 24: class - static keyword\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'inside a class you can use the `static` keyword'\cf6 , \cf4 () => \{\
\
  describe(\cf5 'for methods'\cf6 , \cf4 () => \{\
    \
    
\f1\b \cf6 class 
\f0\b0 \cf4 IntegrationTest \{\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 UnitTest \{\}\
    \
    it(\cf5 'a static method just has the prefix `static`'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 TestFactory \{\
        
\f1\b \cf6 static 
\f0\b0 \cf4 makeTest() \{ 
\f1\b \cf6 return new 
\f0\b0 \cf4 UnitTest()\cf6 ; \cf4 \}\
      \}\
      \
      assert.ok(TestFactory.makeTest() 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 UnitTest)\cf6 ;\
    \cf4 \})\cf6 ;\
  \
    \cf4 it(\cf5 'the method name can be dynamic/computed at runtime'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 methodName = \cf5 'createTest'\cf6 ;\
      
\f1\b class 
\f0\b0 \cf4 TestFactory \{\
        
\f1\b \cf6 static 
\f0\b0 \cf4 [methodName]() \{ 
\f1\b \cf6 return new 
\f0\b0 \cf4 UnitTest()\cf6 ; \cf4 \}\
      \}\
      \
      assert.ok(TestFactory.createTest() 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 UnitTest)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'for accessors'\cf6 , \cf4 () => \{\
    it(\cf5 'a getter name can be static, just prefix it with `static`'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 UnitTest \{\
        
\f1\b \cf6 static get 
\f0\b0 \cf4 testType() \{ 
\f1\b \cf6 return 
\f0\b0 \cf5 'unit'\cf6 ; \cf4 \}\
      \}\
      \
      assert.equal(UnitTest.testType\cf6 , \cf5 'unit'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'even a static getter name can be dynamic/computed at runtime'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 type = \cf5 'test' \cf4 + \cf5 'Type'\cf6 ;\
      
\f1\b class 
\f0\b0 \cf4 IntegrationTest \{\
        
\f1\b \cf6 static 
\f0\b0 \cf4 get [type]() \{ 
\f1\b \cf6 return 
\f0\b0 \cf5 'integration'\cf6 ; \cf4 \}\
      \}\
      \
      assert.ok(\cf5 'testType' 
\f1\b \cf6 in 
\f0\b0 \cf4 IntegrationTest)\cf6 ;\
      \cf4 assert.equal(IntegrationTest.testType\cf6 , \cf5 'integration'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}