{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 74: String - `endsWith()` \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`str.endsWith(searchString)` determines whether `str` ends with `searchString`.'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  
\f1\b \cf6 const 
\f0\b0 \cf4 s = \cf5 'el fin'\cf6 ;\
\
  \cf4 describe(\cf5 '1st parameter, the string to search for'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'works with just a character'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 doesEndWith = s.endsWith(\cf5 'n'\cf4 )\cf6 ;\
      \cf4 assert.equal(doesEndWith\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'works with a string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 expected = 
\f1\b \cf6 true
\f0\b0 ;\
      \cf4 assert.equal(s.endsWith(\cf5 'fin'\cf4 )\cf6 , \cf4 expected)\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'works with unicode characters'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 nuclear = \cf5 'NO \uc0\u9762 '\cf6 ;\
      \cf4 assert.equal(nuclear.endsWith(\cf5 '\uc0\u9762 '\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'a regular expression throws a TypeError'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 aRegExp = \cf5 /the/\cf6 ;\
      \cf4 assert.throws(() => \{\cf5 ''\cf4 .endsWith(aRegExp)\}\cf6 , \cf4 TypeError)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 '2nd parameter, searches within this string as if this string were only this long'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'find "el" at a substring of the length 2'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 endPos = \cf7 2\cf6 ;\
      \cf4 assert.equal(s.endsWith(\cf5 'el'\cf6 , \cf4 endPos)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '`undefined` uses the entire string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 _undefined_ =  
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf6 ;\
      \cf4 assert.equal(s.endsWith(\cf5 'fin'\cf6 , \cf4 _undefined_)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'the parameter gets coerced to an int'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 position = \cf5 '5'\cf6 ;\
      \cf4 assert.equal(s.endsWith(\cf5 'fi'\cf6 , \cf4 position)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 describe(\cf5 'value less than 0'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      it(\cf5 'returns `true`, when searching for an empty string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 emptyString = \cf5 ''\cf6 ;\
        \cf4 assert.equal(\cf5 '1'\cf4 .endsWith(emptyString\cf6 , \cf4 -\cf7 1\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \cf4 it(\cf5 'return `false`, when searching for a non-empty string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 notEmpty = \cf5 'not-empty string'\cf6 ;\
        \cf4 assert.equal(\cf5 '1'\cf4 .endsWith(notEmpty\cf6 , \cf4 -\cf7 1\cf4 )\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'transfer the functionality to other objects'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    
\f1\b \cf6 const 
\f0\b0 \cf4 endsWith = (...args) => String.prototype.endsWith.call(...args)\cf6 ;\
    \
    \cf4 it(\cf5 'e.g. a boolean'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 aBool = 
\f1\b \cf6 true
\f0\b0 ;\
      \cf4 assert.equal(endsWith(!aBool\cf6 , \cf5 'lse'\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'e.g. a number'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 aNumber = \cf7 84\cf6 ;\
      \cf4 assert.equal(endsWith(aNumber + \cf7 1900\cf6 , \cf7 84\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'also using the position works'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 position = \cf7 3\cf6 ;\
      \cf4 assert.equal(endsWith(\cf7 1994\cf6 , \cf5 '99'\cf6 , \cf4 position)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}