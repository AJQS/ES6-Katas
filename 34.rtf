{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 34: symbol\
// A symbol is a unique and immutable data type and may be used as an identifier for object properties\
// read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol\
\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'Symbol'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  it(\cf5 '`Symbol` lives in the global scope'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 expected = Symbol\cf6 ;\
    \cf4 assert.equal(Symbol\cf6 , \cf4 expected)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'every `Symbol()` is unique'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 sym1 = Symbol()\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 sym2 = Symbol()\cf6 ;\
    \cf4 assert.notEqual(sym1\cf6 , \cf4 sym2)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'every `Symbol()` is unique, also with the same parameter'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 sym1 = Symbol(\cf5 'foo'\cf4 )\cf6 ;\
    
\f1\b var 
\f0\b0 \cf4 sym2 = Symbol(\cf5 'foo'\cf4 )\cf6 ;\
    \cf4 assert.notEqual(sym1\cf6 , \cf4 sym2)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 '`typeof Symbol()` returns "symbol"'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 theType = 
\f1\b \cf6 typeof 
\f0\b0 \cf4 Symbol()\cf6 ;\
    \cf4 assert.equal(theType\cf6 , \cf5 'symbol'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 '`new Symbol()` throws an exception, to prevent creation of Symbol wrapper objects'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
    
\f1\b \cf6 function 
\f0\b0 \cf4 fn() \{\
      
\f1\b \cf6 new 
\f0\b0 \cf4 Symbol()\cf6 ;\
    \cf4 \}\
    assert.throws(fn)\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
\
}