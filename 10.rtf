{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh21000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 10: destructuring - array\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'destructuring arrays makes shorter code'\cf6 , \cf4 () => \{\
\
  it(\cf5 'extract value from array, e.g. extract 0 into x like so `let [x] = [0];`'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 [firstValue] = [\cf7 1\cf4 ]\cf6 ;\
    \cf4 assert.strictEqual(firstValue\cf6 , \cf7 1\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'swap two variables, in one operation'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 [x\cf6 , \cf4 y] = [\cf5 'ax'\cf6 , \cf5 'why'\cf4 ]\cf6 ;\
    \cf4 [y\cf6 , \cf4 x] = [x\cf6 , \cf4 y]\cf6 ;\
    \cf4 assert.deepEqual([x\cf6 , \cf4 y]\cf6 , \cf4 [\cf5 'why'\cf6 , \cf5 'ax'\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'leading commas'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 all = [\cf5 'ax'\cf6 , \cf5 'why'\cf6 , \cf5 'zet'\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 [\cf6 ,,\cf4 z] = all\cf6 ;\
    \cf4 assert.equal(z\cf6 , \cf5 'zet'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'extract from nested arrays'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 user = [[\cf5 'Some'\cf6 , \cf5 'One'\cf4 ]\cf6 , \cf7 23\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 [[firstName\cf6 , \cf4 surname]\cf6 , \cf4 age] = user\cf6 ;\
    \
    
\f1\b const 
\f0\b0 \cf4 expected = \cf5 'Some One = 23 years'\cf6 ;\
    \cf4 assert.equal(\cf5 `\cf4 $\{firstName\} $\{surname\}\cf5  = \cf4 $\{age\}\cf5  years`\cf6 , \cf4 expected)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'chained assignments'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 c\cf6 , \cf4 d\cf6 ;\
    
\f1\b let 
\f0\b0 \cf4 [a\cf6 , \cf4 b] = [c\cf6 , \cf4 d] = [\cf7 1\cf6 , \cf7 2\cf4 ]\cf6 ;\
    \cf4 assert.deepEqual([a\cf6 , \cf4 b\cf6 , \cf4 c\cf6 , \cf4 d]\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf6 , \cf7 1\cf6 , \cf7 2\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'in for-of loop'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 for 
\f0\b0 \cf4 (
\f1\b \cf6 var 
\f0\b0 \cf4 [\cf6 ,\cf4 a\cf6 , \cf4 b] 
\f1\b \cf6 of 
\f0\b0 \cf4 [[\cf7 0\cf6 , \cf7 1\cf6 , \cf7 2\cf4 ]]) \{\}\
    assert.deepEqual([a\cf6 , \cf4 b]\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
}