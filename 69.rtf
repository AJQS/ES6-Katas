{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 69: Reflect - defineProperty \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Reflect.defineProperty()` is like `Object.defineProperty()` but returns a Boolean.'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  describe(\cf5 'the function itself'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'is static on the `Reflect` object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 name = \cf5 'defineProperty'\cf6 ;\
      \cf4 assert.equal(name 
\f1\b \cf6 in 
\f0\b0 \cf4 Reflect\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'is of type `function`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 expectedType = \cf5 'function'\cf6 ;\
      \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Reflect.defineProperty\cf6 , \cf4 expectedType)\
    \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'the 1st parameter is the object on which to define a property'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'fails if it is not an object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 noObj\cf6 ;\
      \cf4 assert.throws(() => \{ Reflect.defineProperty(noObj\cf6 , \cf5 'property'\cf6 , \cf4 \{value: \cf5 'value'\cf4 \})\cf6 ; \cf4 \}\cf6 , \cf4 TypeError)\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'accepts an object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{\}\cf6 ;\
      \cf4 assert.doesNotThrow(() => \{ Reflect.defineProperty(obj\cf6 , \cf5 'property'\cf6 , \cf4 \{value: \cf5 'value'\cf4 \})\cf6 ; \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'accepts an instance (of a class)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 instance = 
\f1\b \cf6 new class 
\f0\b0 \cf4 \{\}\cf6 ;\
      \cf4 assert.doesNotThrow(() => \{ Reflect.defineProperty(instance\cf6 , \cf5 'property'\cf6 , \cf4 \{value: \cf5 'value'\cf4 \})\cf6 ; \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 '2nd parameter is the name of the property to be defined on the object (normally a string)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'works with a `normal` string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{\}\cf6 ;\
      \cf4 Reflect.defineProperty(obj\cf6 , \cf5 'prop'\cf6 , \cf4 \{\})\cf6 ;\
      \cf4 assert.equal(\cf5 'prop' 
\f1\b \cf6 in 
\f0\b0 \cf4 obj\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'a number gets converted into a string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{\}\cf6 ;\
      \cf4 Reflect.defineProperty(obj\cf6 , \cf7 1\cf6 , \cf4 \{\})\cf6 ;\
      \cf4 assert.equal(\cf5 '1' 
\f1\b \cf6 in 
\f0\b0 \cf4 obj\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '`undefined` also gets converted into a string (watch out!)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{\}\cf6 ;\
      
\f1\b let 
\f0\b0 \cf4 undef = 
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf6 ;\
      \cf4 Reflect.defineProperty(obj\cf6 , \cf4 undef\cf6 , \cf4 \{\})\cf6 ;\
      \cf4 assert.equal(\cf5 'undefined' 
\f1\b \cf6 in 
\f0\b0 \cf4 obj\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'it can be a symbol'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{\}\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 sym = Symbol.for(\cf5 'prop'\cf4 )\cf6 ;\
      \cf4 Reflect.defineProperty(obj\cf6 , \cf4 sym\cf6 , \cf4 \{\})\cf6 ;\
      \cf4 assert.equal(sym 
\f1\b \cf6 in 
\f0\b0 \cf4 obj\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'the `value` is part of the 3rd parameter, given as a property in an object `\{value: ...\}`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \cf2 // The entire complexity of the 3rd parameter might be covered in a later kata. \
    \
    \cf4 it(\cf5 'contains the initial value of the property, as an object in the property `value`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{\}\cf6 ;\
      \cf4 Reflect.defineProperty(obj\cf6 , \cf5 'prop'\cf6 , \cf4 \{ value: \cf5 'property value'\cf4 \})\cf6 ;\
      \cf4 assert.equal(obj.prop\cf6 , \cf5 'property value'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'can be of any type (even itself)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{\}\cf6 ;\
      \cf4 Reflect.defineProperty(obj\cf6 , \cf5 'prop'\cf6 , \cf4 \{value: obj\})\cf6 ;\
      \cf4 assert.equal(obj.prop\cf6 , \cf4 obj)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'the return value of the function indicates wether the property was defined successfully'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    describe(\cf5 'returns true'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      it(\cf5 'when the property was created (which requires the 3rd parameter too!!!)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 let 
\f0\b0 \cf4 instance = 
\f1\b \cf6 new class 
\f0\b0 \cf4 \{\}\cf6 ;\
        
\f1\b const 
\f0\b0 \cf4 wasPropertyDefined = Reflect.defineProperty(instance\cf6 ,
\f1\b void 
\f0\b0 \cf7 0\cf6 , \cf4 \{value: 
\f1\b \cf6 true
\f0\b0 \cf4 \})\cf6 ;\
        \cf4 assert.equal(wasPropertyDefined\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \cf4 it(\cf5 'no matter what the value of the property is (just the 3rd param has to exist as `\{\}`)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 let 
\f0\b0 \cf4 instance = 
\f1\b \cf6 new class 
\f0\b0 \cf4 \{\}\cf6 ;\
        
\f1\b const 
\f0\b0 \cf4 wasPropertyDefined = Reflect.defineProperty(instance\cf6 ,
\f1\b void 
\f0\b0 \cf7 0\cf6 , \cf4 \{\})\cf6 ;\
        \cf4 assert.equal(wasPropertyDefined\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 describe(\cf5 'returns false'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      it(\cf5 'when no property name is given (since no property has been added)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 let 
\f0\b0 \cf4 instance = 
\f1\b \cf6 new class 
\f0\b0 \cf4 \{\}\cf6 ;\
        
\f1\b const 
\f0\b0 \cf4 wasPropertyDefined = Reflect.defineProperty(instance)\cf6 ;\
        \cf4 assert.equal(wasPropertyDefined\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \cf4 it(\cf5 'when no 3rd parameter, the descriptor is given'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 let 
\f0\b0 \cf4 instance = 
\f1\b \cf6 new class 
\f0\b0 \cf4 \{\}\cf6 ;\
        
\f1\b const 
\f0\b0 \cf4 wasPropertyDefined = Reflect.defineProperty(instance\cf6 , \cf5 'property'\cf6 , \cf4 \{value: \cf5 'value'\cf4 \})\cf6 ;\
        \cf4 assert.equal(wasPropertyDefined\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}