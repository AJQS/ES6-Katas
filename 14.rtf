{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 14: destructuring - parameters\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'destructuring function parameters'\cf6 , \cf4 () => \{\
\
  describe(\cf5 'destruct parameters'\cf6 , \cf4 () => \{\
    it(\cf5 'multiple params from object'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 fn = (\{id\cf6 ,\cf4 name\}) => \{\
        assert.equal(id\cf6 , \cf7 42\cf4 )\cf6 ;\
        \cf4 assert.equal(name\cf6 , \cf5 'Wolfram'\cf4 )\cf6 ;\
      \cf4 \}\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 user = \{name: \cf5 'Wolfram'\cf6 , \cf4 id: \cf7 42\cf4 \}\cf6 ;\
      \cf4 fn(user)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'multiple params from array/object'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 fn = ([\cf6 ,\cf4 \{name\}]) => \{\
        assert.equal(name\cf6 , \cf5 'Alice'\cf4 )\cf6 ;\
      \cf4 \}\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 users = [\{name: \cf5 'nobody'\cf4 \}\cf6 , \cf4 \{name: \cf5 'Alice'\cf6 , \cf4 id: \cf7 42\cf4 \}]\cf6 ;\
      \cf4 fn(users)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'default values'\cf6 , \cf4 () => \{\
    it(\cf5 'for simple values'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 fn = (id\cf6 , \cf4 name=\cf5 'Bob'\cf4 ) => \{\
        assert.strictEqual(id\cf6 , \cf7 23\cf4 )\cf6 ;\
        \cf4 assert.strictEqual(name\cf6 , \cf5 'Bob'\cf4 )\cf6 ;\
      \cf4 \}\cf6 ;\
      \cf4 fn(\cf7 23\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'for a missing array value'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 defaultUser = \{id: \cf7 23\cf6 , \cf4 name: \cf5 'Joe'\cf4 \}\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 fn = ([user = \{id: \cf7 23\cf6 , \cf4 name: \cf5 'Joe'\cf4 \}] ) => \{\
        assert.deepEqual(user\cf6 , \cf4 defaultUser)\cf6 ;\
      \cf4 \}\cf6 ;\
      \cf4 fn([])\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'mix of parameter types'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 fn = (id = \cf7 1\cf6 , \cf4 [arr = \cf7 2\cf4 ]\cf6 , \cf4 \{obj = \cf7 3\cf4 \} ) => \{\
        assert.equal(id\cf6 , \cf7 1\cf4 )\cf6 ;\
        \cf4 assert.equal(arr\cf6 , \cf7 2\cf4 )\cf6 ;\
        \cf4 assert.equal(obj\cf6 , \cf7 3\cf4 )\cf6 ;\
      \cf4 \}\cf6 ;\
      \cf4 fn(
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf6 , \cf4 []\cf6 , \cf4 \{\})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
}