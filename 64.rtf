{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 64: Set - delete\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`set.delete()` deletes an element from a set'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
\
  
\f1\b \cf6 let 
\f0\b0 \cf4 set\cf6 ;\
  \cf4 beforeEach(() => set = 
\f1\b \cf6 new 
\f0\b0 \cf4 Set())\cf6 ;\
\
  \cf4 describe(\cf5 'use `delete(<value>)` to delete an element'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    beforeEach(
\f1\b \cf6 function
\f0\b0 \cf4 () \{\
      set.add(\cf5 'one'\cf4 ).add(\cf5 'two'\cf4 ).add(\cf5 'three'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '`delete()` returns `true` when the element was found'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 returns = set.delete(\cf5 'one'\cf4 )\cf6 ;\
      \cf4 assert.strictEqual(returns\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'and the size decreases'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      set.delete(\cf5 'one'\cf4 )\cf6 ;\
      \cf4 assert.equal(set.size\cf6 , \cf7 2\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'if nothing was deleted (no element with the given value was found)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'returns `false`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      \cf2 // set.add('one');\
      
\f1\b \cf6 const 
\f0\b0 \cf4 returns = set.delete(\cf5 'one'\cf4 )\cf6 ;\
      \
      \cf4 assert.equal(returns\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 '`undefined` is a valid value in a set'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'deleting it, when it is not in the set, returns `false` too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 whatToDelete\cf6 ;\
      \cf4 assert.equal(set.delete(whatToDelete)\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 '`delete()` removes it, when its in the set'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      set.add(undefined)\cf6 ;\
      \cf4 assert.equal(set.delete()\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \
  \cf4 describe(\cf5 'the value does NOT get casted'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'number 1 is different to string "1"'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      set.add(\cf7 1\cf4 )\cf6 ;\
      \cf2 // set.add('1');\
      \cf4 assert.equal(set.delete(\cf5 '1'\cf4 )\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\cf4 \})\cf6 ;\
\
}