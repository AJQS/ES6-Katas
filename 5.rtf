{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 5: arrow functions - basics\
// To do: make all tests pass, leave the asserts unchanged!\
\
\cf4 describe(\cf5 'arrow functions'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  it(\cf5 'are shorter to write'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 func = () => \{\
      
\f1\b \cf6 return 
\f0\b0 \cf5 'I am func'\cf6 ;\
    \cf4 \}\cf6 ;\
    \cf4 assert.equal(func()\cf6 , \cf5 'I am func'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'a single expression, without curly braces returns too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 func = () => \cf5 'I return too'\cf6 ;\
    \cf4 assert.equal(func()\cf6 , \cf5 'I return too'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'one parameter can be written without parens'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 func = param => param + \cf7 1\cf6 ;\
    \cf4 assert.equal(func(\cf7 23\cf4 )\cf6 , \cf7 24\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'many params require parens'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 func = (param\cf6 ,\cf4 param1) => param + param1\cf6 ;\
    \cf4 assert.equal(func(\cf7 23\cf6 , \cf7 42\cf4 )\cf6 , \cf7 23\cf4 +\cf7 42\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'body needs parens to return an object'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 func = () => (\{iAm: \cf5 'an object'\cf4 \})\cf6 ;\
    \cf4 assert.deepEqual(func()\cf6 , \cf4 \{iAm: \cf5 'an object'\cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
}