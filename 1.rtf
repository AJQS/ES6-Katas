{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 1: template strings - basics\
// To do: make all tests pass, leave 	the asserts unchanged!\
\
\cf4 describe(\cf5 'a template string, is wrapped in ` (backticks) instead of \cf6 \\'\cf5  or "'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  describe(\cf5 'by default, behaves like a normal string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'just surrounded by backticks'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 var 
\f0\b0 \cf4 str = \cf5 `like a string`\cf6 ;\
      \cf4 assert.equal(str\cf6 , \cf5 'like a string'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
\
  
\f1\b var 
\f0\b0 \cf4 x = \cf7 42\cf6 ;\
  
\f1\b var 
\f0\b0 \cf4 y = \cf7 23\cf6 ;\
  \
  \cf4 describe(\cf5 'can evaluate variables, which are wrapped in "$\{" and "\}"'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'e.g. a simple variable "$\{x\}" just gets evaluated'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 var 
\f0\b0 \cf4 evaluated = \cf5 `x=\cf4 $\{x\}\cf5 `\cf6 ;\
      \cf4 assert.equal(evaluated\cf6 , \cf5 'x=' \cf4 + x)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'multiple variables get evaluated too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 var 
\f0\b0 \cf4 evaluated = \cf5 `\cf4 $\{ x \}\cf5 +\cf4 $\{ y \}\cf5 `\cf6 ;\
      \cf4 assert.equal(evaluated\cf6 , \cf4 x + \cf5 '+' \cf4 + y)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'can evaluate any expression, wrapped inside "$\{...\}"'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'all inside "$\{...\}" gets evaluated'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 var 
\f0\b0 \cf4 evaluated = \cf5 `\cf4 $\{ x + y \}\cf5 `\cf6 ;\
      \cf4 assert.equal(evaluated\cf6 , \cf4 x+y)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'inside "$\{...\}" can also be a function call'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function 
\f0\b0 \cf4 getDomain()\{ \
        
\f1\b \cf6 return 
\f0\b0 \cf4 document.domain\cf6 ; \
      \cf4 \}\
      
\f1\b \cf6 var 
\f0\b0 \cf4 evaluated = \cf5 `\cf4 $\{ getDomain() \}\cf5 `\cf6 ;\
      \cf4 assert.equal(evaluated\cf6 , \cf5 'tddbin.com'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}