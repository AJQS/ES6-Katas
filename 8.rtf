{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 8: block scope - const\
// To do: make all tests pass, leave the asserts unchanged!\
\
\cf4 describe(\cf5 '`const` is like `let` plus read-only'\cf6 , \cf4 () => \{\
\
  describe(\cf5 'scalar values are read-only'\cf6 , \cf4 () => \{\
\
    it(\cf5 'number'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 constNum = \cf7 0\cf6 ;\
      \cf2 //constNum = 1; // Esto dar\'eda un: "Uncaught TypeError: Assignment to constant variable"\
      \cf4 assert.equal(constNum\cf6 , \cf7 0\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'string'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 constString = \cf5 'I am a const'\cf6 ;\
      \cf2 //constString = 'Cant change you?';\
      \cf4 assert.equal(constString\cf6 , \cf5 'I am a const'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
\
  \cf4 \})\cf6 ;\
  \
  
\f1\b const 
\f0\b0 \cf4 notChangeable = \cf7 23\cf6 ;\
\
  \cf4 it(\cf5 'const scope leaks too'\cf6 , \cf4 () => \{\
    assert.equal(notChangeable\cf6 , \cf7 23\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'complex types are NOT fully read-only'\cf6 , \cf4 () => \{\
\
    it(\cf5 'array'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 arr = [\cf7 42\cf6 , \cf7 23\cf4 ]\cf6 ;\
      \cf2 //arr[0] = 0; Cuidado aqu\'ed no nos da el error el modificar los valores internos, si si asignamos el valor a arr esto es una causa de porque dos objetos nunca son iguales aunque tengan las mismas propiedades\
      
\f1\b \cf6 const 
\f0\b0 \cf4 arr2 = [\cf7 42\cf6 ,\cf7 23\cf4 ]\cf6 ;\
      \cf4 console.log(arr === arr2)\cf6 ;\
      \cf4 assert.equal(arr[\cf7 0\cf4 ]\cf6 , \cf7 42\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'object'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 obj = \{x: \cf7 1\cf4 \}\cf6 ;\
      \cf4 obj.x += \cf7 2\cf6 ;\
      \cf4 assert.equal(obj.x\cf6 , \cf7 3\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
}