{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 58: Reflect - basics\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Reflect` basics'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  describe(\cf5 'Reflect is special, it is different to e.g. `Object`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'is not a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 expectedType = \cf5 'object'\cf6 ;\
      \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Reflect\cf6 , \cf4 expectedType)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'it can not be instantiated'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 tryToConstruct = () => \{ 
\f1\b \cf6 new 
\f0\b0 \cf4 Reflect()\cf6 ; \cf4 \}\cf6 ;\
      \cf4 assert.throws(tryToConstruct\cf6 , \cf4 TypeError)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'has no `call` method (as opposed to e.g. Object)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 expected = \cf5 'undefined'\cf6 ;\
      \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Reflect.call\cf6 , \cf4 expected)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;  \
  \
  \cf4 describe(\cf5 'some `Reflect` usages'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 '`Reflect.construct()` is like new'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 Class = () => \{\}\cf6 ;\
      \cf4 assert.equal(Reflect.construct(Class\cf6 , \cf4 []) 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 Class\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 '`Reflect.get()` returns a property`s value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{x: \cf7 23\cf4 \}\cf6 ;\
      \cf4 assert.equal(Reflect.get(obj\cf6 , \cf5 'x'\cf4 )\cf6 , \cf7 23\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 '`Reflect.has()` is like `in` just as a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{ x: \cf7 23 \cf4 \}\cf6 ;\
      \cf4 assert.equal(Reflect.has(obj\cf6 , \cf5 'x'\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}