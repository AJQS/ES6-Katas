{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 60: Reflect - getPrototypeOf \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Reflect.getPrototypeOf` returns the prototype'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  it(\cf5 'works like `Object.getPrototypeOf`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 viaObject = Object.getPrototypeOf(\{\})\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 viaReflect = Reflect.getPrototypeOf(\{\})\cf6 ;\
    \
    \cf4 assert.strictEqual(viaObject\cf6 , \cf4 viaReflect)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'throws a TypeError for a non-object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 fn = () => \{ Reflect.getPrototypeOf() \}\cf6 ;\
    \cf4 assert.throws(fn\cf6 , \cf4 TypeError)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'a `new Set()` has a prototype'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 aSet = 
\f1\b \cf6 new 
\f0\b0 \cf4 Set()\cf6 ;\
    \
    \cf4 assert.equal(Reflect.getPrototypeOf(aSet)\cf6 , \cf4 Set.prototype)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'for a class, it is `Klass.prototype`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 Klass \{\}\
    
\f1\b \cf6 const 
\f0\b0 \cf4 proto = Reflect.getPrototypeOf(
\f1\b \cf6 new 
\f0\b0 \cf4 Klass())\cf6 ;\
    \
    \cf4 assert.equal(proto\cf6 , \cf4 Klass.prototype)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'for a old-style class, works too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 function 
\f0\b0 \cf4 Klass() \{\}\
    
\f1\b \cf6 const 
\f0\b0 \cf4 proto = Reflect.getPrototypeOf(
\f1\b \cf6 new 
\f0\b0 \cf4 Klass())\cf6 ;\
    \
    \cf4 assert.equal(proto\cf6 , \cf4 Klass.prototype)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'an array has a prototype too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 arr = []\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 expectedProto = Array.prototype\cf6 ;\
    \
    \cf4 assert.equal(Reflect.getPrototypeOf(arr)\cf6 , \cf4 expectedProto)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf2 // TODO\
  // it('getting the prototype of an "exotic namespace object" returns `null`', function() \{\
  //   http://www.ecma-international.org/ecma-262/6.0/#sec-module-namespace-exotic-objects-getprototypeof\
  //   Don't know how to write a test for this yet, without creating a dep in tddbin hardcoded\
  //   PRs welcome\
  //   assert.equal(Reflect.getPrototypeOf(namespace exotic object), null);\
  // \});\
\cf4 \})\cf6 ;\
}