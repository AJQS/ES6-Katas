{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 47: Set - basics\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Set` lets you store unique values of any type'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
\
  it(\cf5 '`Set` is a new global constructor function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Set\cf6 , \cf5 'function'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'every value in a set is unique'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 set = 
\f1\b \cf6 new 
\f0\b0 \cf4 Set()\cf6 ;\
    \
    \cf4 set.add(\cf7 1\cf4 )\cf6 ;\
    \cf4 set.add(\cf7 1\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 expectedSize = \cf7 1\cf6 ;\
    \
    \cf4 assert.equal(set.size\cf6 , \cf4 expectedSize)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'the string "1" is different to the number 1'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 set = 
\f1\b \cf6 new 
\f0\b0 \cf4 Set()\cf6 ;\
    \cf4 set.add(\cf7 1\cf4 )\cf6 ;\
    \cf4 set.add(\cf5 '1'\cf4 )\cf6 ;\
\
    \cf4 assert.equal(set.size\cf6 , \cf7 2\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'even NaN is equal to NaN'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 set = 
\f1\b \cf6 new 
\f0\b0 \cf4 Set()\cf6 ;\
    \cf4 set.add(NaN)\cf6 ;\
    \cf4 set.add(NaN)\cf6 ;\
    \
    \cf4 assert.equal(set.size\cf6 , \cf7 1\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 '+0 and -0 are seen as equal'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 set = 
\f1\b \cf6 new 
\f0\b0 \cf4 Set()\cf6 ;\
    \cf4 set.add(+\cf7 0\cf4 )\cf6 ;\
    \cf4 set.add(\cf7 0\cf4 )\cf6 ;\
    \cf4 set.add(-\cf7 0\cf4 )\cf6 ;\
    \
    \cf4 assert.deepEqual([...set.values()]\cf6 , \cf4 [+\cf7 0\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}