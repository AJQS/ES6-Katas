{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 44: Map - basics\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Map` is a key/value map'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
\
  it(\cf5 '`Map` is a new global constructor function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Map\cf6 , \cf5 'function'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'provides `new Map().set()` to add key+value pair, `get()` to read it by key'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(\cf5 'key'\cf6 , \cf5 'value'\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 value = map.get(\cf5 'key'\cf4 )\cf6 ;\
    \
    \cf4 assert.equal(value\cf6 , \cf5 'value'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 '`has()` tells if map has the given key'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(\cf5 'key'\cf6 , \cf5 'value'\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 hasIt = map.has(\cf5 'key'\cf4 )\cf6 ;\
    \
    \cf4 assert.equal(hasIt\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'a map is iterable'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(\cf5 '1'\cf6 , \cf5 'one'\cf4 )\cf6 ;\
    \cf4 map.set(\cf5 '2'\cf6 , \cf5 'two'\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 mapAsArray = Array.from(map)\cf6 ; \cf2 // hint: kata #29 http://tddbin.com/#?kata=es6/language/array-api/from\
    \
    \cf4 assert.deepEqual(mapAsArray\cf6 , \cf4 [[\cf5 '1'\cf6 , \cf5 'one'\cf4 ]\cf6 , \cf4 [\cf5 '2'\cf6 , \cf5 'two'\cf4 ]])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\
  \cf4 it(\cf5 'complex types can be keys'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 obj = \{x: \cf7 1\cf4 \}\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 otherObj = \{x: \cf7 1\cf4 \}\cf6 ;\
    
\f1\b let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(obj\cf6 , \cf5 ''\cf4 )\cf6 ;\
    \
    \cf4 assert.equal(map.has(otherObj)\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}