{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 75: Promise - basics \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'a Promise represents an operation that hasn`t completed yet, but is expected in the future'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  it(\cf5 '`Promise` is a global function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 expectedType = \cf5 'function'\cf6 ;\
    \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Promise\cf6 , \cf4 expectedType)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'the constructor'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
    it(\cf5 'instantiating it without params throws'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 fn = () => \{ Promise() \}\
      assert.throws(fn)\cf6 ;\
    \cf4 \})\cf6 ;  \
    \
    \cf4 it(\cf5 'expects a function as parameter'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 param = () => \{\}\cf6 ;\
      \cf4 assert.doesNotThrow(() => \{ 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise(param)\cf6 ; \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;  \
    \
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'simplest promises'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
    it(\cf5 'resolve a promise by calling the `resolve` function given as first parameter'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve) => \{\
         resolve()\cf6 ;\
      \cf4 \})\cf6 ;\
      \
      \cf4 promise\
        .then(() => done())\
        .catch(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to resolve.'\cf4 )))\cf6 ;\
    \cf4 \})\cf6 ;\
  \
    \cf4 it(\cf5 'the `resolve` function can return a value, that is consumed by the `promise.then()` callback'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve) => \{\
        resolve(\cf7 42\cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \
      \cf4 promise\
        .then(value => \{assert.equal(value\cf6 , \cf7 42\cf4 )\cf6 ; \cf4 done()\cf6 ; \cf4 \})\
        .catch(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to resolve with 42!'\cf4 )))\cf6 ;\
    \cf4 \})\cf6 ;\
  \
    \cf4 it(\cf5 'rejecting a promise is done by calling the callback given as 2nd parameter'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise(() => \{\
        reject()\cf6 ;\
      \cf4 \})\cf6 ;\
      \
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to be rejected.'\cf4 )))\
        .catch(() => done())\cf6 ;\
    \cf4 \})\cf6 ;\
\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'an asynchronous promise'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
    it(\cf5 'can resolve later, also by calling the first callback'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve) => \{\
        setTimeout(() => resolve()\cf6 , \cf7 100\cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \
      \cf4 promise\
        .then(() => done())\
        .catch(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to resolve.'\cf4 )))\cf6 ;\
    \cf4 \})\cf6 ;\
  \
    \cf4 it(\cf5 'reject it at some later point in time, calling the 2nd callback'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve\cf6 ,\cf4 reject) => \{\
        setTimeout(() => reject()\cf6 , \cf7 100\cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to be rejected.'\cf4 )))\
        .catch(() => done())\cf6 ;\
    \cf4 \})\cf6 ;\
\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'test library (mocha here) support for promises'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'just returning the promise makes the test library check that the promise resolves'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve\cf6 ,\cf4 reject) => \{\
        resolve()\cf6 ;\
      \cf4 \})\cf6 ;\
      \
      \cf2 // return the promise to mocha, it has the checking for promise resolving built in, when it receives a promise\
      
\f1\b \cf6 return 
\f0\b0 \cf4 promise\cf6 ;\
    \cf4 \})\cf6 ;\
  \
  \cf4 \})\cf6 ;\
\cf4 \})\cf6 ;\
\
}