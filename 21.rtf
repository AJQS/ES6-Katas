{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh21000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 21: spread - with-strings\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'spread with strings'\cf6 , \cf4 () => \{\
\
  it(\cf5 'simply spread each char of a string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 [a\cf6 ,\cf4 b] = [...\cf5 'ab'\cf4 ]\cf6 ;\
    \cf4 assert.equal(a\cf6 , \cf5 'a'\cf4 )\cf6 ;\
    \cf4 assert.equal(b\cf6 , \cf5 'b'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'extracts each array item'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 [c\cf6 ,\cf4 a\cf6 ,\cf4 b] = [\cf5 'a'\cf6 , \cf4 ...\cf5 '12'\cf4 ]\cf6 ;\
    \cf4 assert.equal(a\cf6 , \cf7 1\cf4 )\cf6 ;\
    \cf4 assert.equal(b\cf6 , \cf7 2\cf4 )\cf6 ;\
    \cf4 assert.equal(c\cf6 , \cf5 'a'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'works anywhere inside an array (must not be last)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 letters = [\cf5 'a'\cf6 , \cf4 ...\cf5 'bcd'\cf6 , \cf5 'e'\cf6 , \cf5 'f'\cf4 ]\cf6 ;\
    \cf4 assert.equal(letters.length\cf6 , \cf7 6\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'dont confuse with the rest operator'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 [...rest] = [...\cf5 '1234'\cf6 ,\cf4 ...\cf5 '5'\cf4 ]\cf6 ;\
    \cf4 assert.deepEqual(rest\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf6 , \cf7 3\cf6 , \cf7 4\cf6 , \cf7 5\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'passed as function parameter'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 max = Math.max(...\cf5 '12345'\cf4 )\cf6 ;\
    \cf4 assert.deepEqual(max\cf6 , \cf7 5\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}