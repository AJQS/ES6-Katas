{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh21000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 27: class - super inside a method\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'inside a class use `super` to access parent methods'\cf6 , \cf4 () => \{\
\
  it(\cf5 'use of `super` without `extends` fails (already when transpiling)'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{ \
      hasSuper() \{ 
\f1\b \cf6 return false
\f0\b0 ; \cf4 \} \cf2 // we can`t use super without extends\
    \cf4 \}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 A().hasSuper()\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 '`super` with `extends` calls the method of the given name of the parent class'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{hasSuper() \{ 
\f1\b \cf6 return true
\f0\b0 ; \cf4 \}\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{hasSuper() \{ 
\f1\b \cf6 return super
\f0\b0 \cf4 .hasSuper()\cf6 ; \cf4 \}\}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B().hasSuper()\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'when overridden a method does NOT automatically call its super method'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{hasSuper() \{ 
\f1\b \cf6 return true
\f0\b0 ; \cf4 \}\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{hasSuper() \{ 
\f1\b \cf6 return 
\f0\b0 \cf4 undefined\cf6 ; \cf4 \}\}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B().hasSuper()\cf6 , 
\f1\b void 
\f0\b0 \cf7 0\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 '`super` works across any number of levels of inheritance'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{iAmSuper() \{ 
\f1\b \cf6 return this
\f0\b0 \cf4 .youAreSuper\cf6 ; \cf4 \}\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{constructor() \{ 
\f1\b \cf6 super
\f0\b0 \cf4 ()\cf6 ; 
\f1\b this
\f0\b0 \cf4 .youAreSuper = 
\f1\b \cf6 true
\f0\b0 ; \cf4 \} \}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 C 
\f1\b \cf6 extends 
\f0\b0 \cf4 B \{\
      iAmSuper() \{ \
        
\f1\b \cf6 return this
\f0\b0 \cf4 .youAreSuper\cf6 ; \
      \cf4 \}\
    \}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 C().iAmSuper()\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'accessing an undefined member of the parent class returns `undefined`'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{getMethod() \{ 
\f1\b \cf6 return super
\f0\b0 \cf4 .hasSuper\cf6 ; \cf4 \}\}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B().getMethod()\cf6 , 
\f1\b void 
\f0\b0 \cf7 0\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}