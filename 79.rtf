{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 79: Promise - catch\
// To do: make all tests pass, leave the assert lines unchanged!\
// Here we use promises to trigger, don't modify the block with the \
// returning promise!\
\
\cf4 describe(\cf5 '`catch()` returns a Promise and deals with rejected cases only'\cf6 , \cf4 () => \{\
\
  describe(\cf5 'prerequisites for understanding'\cf6 , \cf4 () => \{\
\
    it(\cf5 '*return* a fulfilled promise, to pass a test'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 return 
\f0\b0 \cf4 Promise.resolve()\cf6 ;\
      \cf4 assert(
\f1\b \cf6 false
\f0\b0 \cf4 )\cf6 ; \cf2 // Don't touch! Make the test pass in the line above!\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'reminder: the test passes when a fulfilled promise is returned'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 return 
\f0\b0 \cf4 Promise.resolve(\cf5 'I should fulfill.'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 '`catch` method basics'\cf6 , \cf4 () => \{\
    it(\cf5 'is an instance method'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 p = Promise.resolve()\cf6 ;\
      \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 p.catch\cf6 , \cf5 'function'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'catches only promise rejections'\cf6 , \cf4 (done) => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = Promise.reject()\cf6 ;\
      \cf4 promise\
        .then(() => \{ done(\cf5 'Should not be called!'\cf4 )\cf6 ; \cf4 \})\
        .catch(done)\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'returns a new promise'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 whatToReturn = () => Promise.resolve()\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 promise = Promise.reject()\cf6 ;\
      
\f1\b return 
\f0\b0 \cf4 promise.catch(() =>\
        whatToReturn()\
      )\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'converts it`s return value into a promise'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 p = Promise.reject()\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 p1 = p.catch(() => \cf5 'promise?'\cf4 )\cf6 ;\
\
      
\f1\b return 
\f0\b0 \cf4 p1.then(result => assert.equal(\cf5 'promise?'\cf6 , \cf4 result))\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'the first parameter is the rejection reason'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 p = Promise.reject(\cf5 'oops'\cf4 )\cf6 ;\
\
      
\f1\b return 
\f0\b0 \cf4 p.catch(reason => \{\
        assert.equal(reason\cf6 , \cf5 'oops'\cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'multiple `catch`es'\cf6 , \cf4 () => \{\
    it(\cf5 'only the first `catch` is called'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 p = Promise.reject(\cf5 '1'\cf4 )\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 p1 = p\
          .catch(reason => \cf5 `\cf4 $\{reason\}\cf5  AND 2`\cf4 )\
          .catch(reason => \cf5 `\cf4 $\{reason\}\cf5  AND 3`\cf4 )\
        \cf6 ;\
\
      
\f1\b return 
\f0\b0 \cf4 p1.then(result =>\
        assert.equal(result\cf6 , \cf5 '1 AND 2'\cf4 )\
      )\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'if a `catch` throws, the next `catch` catches it'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 p = Promise.reject(\cf5 '1'\cf4 )\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 p1 = p\
          .catch(reason => \{ 
\f1\b \cf6 throw 
\f0\b0 \cf4 Error(\cf5 `\cf4 $\{reason\}\cf5  AND 2`\cf4 ) \})\
          .catch(err => \{ 
\f1\b \cf6 throw 
\f0\b0 \cf4 Error(\cf5 `\cf4 $\{err.message\}\cf5  AND 3`\cf4 ) \})\
          .catch(err => err.message)\
        \cf6 ;\
\
      
\f1\b return 
\f0\b0 \cf4 p1.then(result =>\
        assert.equal(result\cf6 , \cf5 '1 AND 2 AND 3'\cf4 )\
      )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
\
}