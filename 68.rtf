{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 68: Reflect - construct \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Reflect.construct` is the `new` operator as a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  describe(\cf5 'the function itself'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'is static on the `Reflect` object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 name = \cf5 'construct'\cf6 ;\
      \cf4 assert.equal(name 
\f1\b \cf6 in 
\f0\b0 \cf4 Reflect\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'is of type `function`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 expectedType = \cf5 'function'\cf6 ;\
      \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Reflect.construct\cf6 , \cf4 expectedType)\
    \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'the 1st parameter is the constructor to be invoked'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'fails when given a number as constructor'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 aNumber = Number()\cf6 ;\
      \cf4 assert.throws(() => \{ Reflect.construct(aNumber\cf6 , \cf4 []) \}\cf6 , \cf4 TypeError)\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'works giving a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 aFunction = () => \{\}\cf6 ;\
      \cf4 assert.doesNotThrow(() => \{ Reflect.construct(aFunction\cf6 , \cf4 []) \})\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'works giving a class'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 aClass = 
\f1\b \cf6 class 
\f0\b0 \cf4 \{\}\cf6 ;\
      \cf4 assert.doesNotThrow(() => \{ Reflect.construct(aClass\cf6 , \cf4 []) \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'the 2nd parameter is a list of arguments, that will be passed to the constructor'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    
\f1\b \cf6 const 
\f0\b0 \cf4 aClass = 
\f1\b \cf6 class 
\f0\b0 \cf4 \{\}\cf6 ;\
    \cf4 it(\cf5 'fails when it`s not an array(-like), e.g. a number'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 aNumber = Number()\cf6 ;\
      \cf4 assert.throws(() => \{ Reflect.construct(aClass\cf6 , \cf4 aNumber) \}\cf6 , \cf4 TypeError)\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'works with an array-like object (the `length` property look up should not throw)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 arrayLike = \{
\f1\b \cf6 get 
\f0\b0 \cf4 length() \{ \}\}\cf6 ;\
      \cf4 assert.doesNotThrow(() => \{ Reflect.construct(aClass\cf6 , \cf4 arrayLike) \})\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'works with a real array'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 realArray = []\cf6 ;\
      \cf4 assert.doesNotThrow(() => \{ Reflect.construct(aClass\cf6 , \cf4 realArray) \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'in use'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'giving it a class it returns an instance of this class'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 Constructable \{\}\
      
\f1\b \cf6 let 
\f0\b0 \cf4 instance = Reflect.construct(Constructable\cf6 , \cf4 [])\cf6 ;\
      \
      \cf4 assert.equal(instance 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 Constructable\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 describe(\cf5 'the list of arguments are passed to the constructor as given'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 Constructable \{\
        constructor(...args) \{ 
\f1\b \cf6 this
\f0\b0 \cf4 .args = args\cf6 ; \cf4 \}\
      \}\
      it(\cf5 'if none given, nothing is passed'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 let 
\f0\b0 \cf4 instance = Reflect.construct(Constructable\cf6 , \cf4 [])\cf6 ;\
        \
        \cf4 assert.deepEqual(instance.args\cf6 , \cf4 [])\cf6 ;\
      \cf4 \})\cf6 ;\
      \cf4 it(\cf5 'passing an array, all args of any type are passed'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 argumentsList = [\cf5 'arg1'\cf6 , \cf4 [\cf5 'arg2.1'\cf6 , \cf5 'arg2.2'\cf4 ]\cf6 , \cf4 \{arg: \cf7 3\cf4 \}]\cf6 ;\
        
\f1\b let 
\f0\b0 \cf4 instance = Reflect.construct(Constructable\cf6 , \cf4 argumentsList)\cf6 ;\
        \
        \cf4 assert.deepEqual(instance.args\cf6 , \cf4 argumentsList)\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'the length property'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'of `Reflect.construct` is 2'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 expected = \cf7 2\cf6 ;\
      \cf4 assert.equal(Reflect.construct.length\cf6 , \cf4 expected)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}