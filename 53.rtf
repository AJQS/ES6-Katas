{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 53: Map - initialize\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'initialize a `Map`'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
\
  it(\cf5 'a `new Map()` is empty, has size=0'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 mapSize = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map().size\cf6 ;\
    \cf4 assert.equal(mapSize\cf6 , \cf7 0\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'init Map with `[[]]` has a size=1'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 mapSize = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map([[]]).size\cf6 ;\
    \
    \cf4 assert.equal(mapSize\cf6 , \cf7 1\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'init a Map with `[[1]]` is the same as `map.set(1, void 0)`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map1 = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map([[\cf7 1\cf4 ]])\cf6 ;\
    
\f1\b let 
\f0\b0 \cf4 map2 = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map().set(\cf7 1\cf6 , 
\f1\b void 
\f0\b0 \cf7 0\cf4 )\cf6 ;\
    \
    \cf4 assertMapsEqual(map1\cf6 , \cf4 map2)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'init Map with multiple key+value pairs'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 pair1 = [\cf7 1\cf6 , \cf5 'one'\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 pair2 = [\cf7 2\cf6 , \cf5 'two'\cf4 ]\cf6 ;\
    \
    
\f1\b const 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map([pair1\cf6 ,\cf4 pair2])\cf6 ;\
    \
    \cf4 assertMapsEqual(map\cf6 , 
\f1\b new 
\f0\b0 \cf4 Map().set(...pair1).set(...pair2))\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'keys are unique, the last one is used'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 pair1 = [\cf7 1\cf6 , \cf5 'one'\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 pair2 = [\cf7 1\cf6 , \cf5 'uno'\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 pair3 = [\cf7 1\cf6 , \cf5 'eins'\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 pair4 = [\cf7 2\cf6 , \cf5 'two'\cf4 ]\cf6 ;\
    \
    
\f1\b const 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map([pair1\cf6 , \cf4 pair2\cf6 ,\cf4 pair3\cf6 , \cf4 pair4])\cf6 ;\
    \
    \cf4 assertMapsEqual(map\cf6 , 
\f1\b new 
\f0\b0 \cf4 Map().set(...pair3).set(...pair4))\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'init Map from an Object, is a bit of work'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 obj = \{x: \cf7 1\cf6 , \cf4 y: \cf7 2\cf4 \}\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 keys = Object.keys(obj)\cf6 ;\
    \cf4 keys.forEach(key => map.set(key\cf6 ,\cf4 obj[key]))\cf6 ;\
\
    
\f1\b const 
\f0\b0 \cf4 expectedEntries = [[\cf5 'x'\cf6 , \cf7 1\cf4 ]\cf6 , \cf4 [\cf5 'y'\cf6 , \cf7 2\cf4 ]]\cf6 ;\
    \cf4 assertMapsEqual(map\cf6 , \cf4 expectedEntries)\cf6 ;\
  \cf4 \})\cf6 ;\
\cf4 \})\cf6 ;\
\

\f1\b function 
\f0\b0 \cf4 mapToArray(map) \{\
  
\f1\b \cf6 return 
\f0\b0 \cf4 Array.from(map)\cf6 ;\
\cf4 \}\

\f1\b \cf6 function 
\f0\b0 \cf4 assertMapsEqual(map1\cf6 , \cf4 map2) \{\
  assert.deepEqual(mapToArray(map1)\cf6 , \cf4 mapToArray(map2))\cf6 ;\
\cf4 \}\
\
}