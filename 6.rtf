{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red191\green100\blue38;
\red153\green168\blue186;\red88\green118\blue71;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh21000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 6: arrow functions - binding\
// To do: make all tests pass, leave the asserts unchanged!\
\

\f1\b \cf4 class 
\f0\b0 \cf5 LexicallyBound \{\
  \
  getFunction() \{\
    
\f1\b \cf4 return 
\f0\b0 \cf5 () => \{\
      
\f1\b \cf4 return this
\f0\b0 ;\
    \cf5 \}\
  \}\
  \
  getArgumentsFunction() \{\
    
\f1\b \cf4 return 
\f0\b0 \cf5 () => \{\
      
\f1\b \cf4 return 
\f0\b0 \cf5 arguments\
    \}\
  \}\
  \
\}\
\
describe(\cf6 'arrow functions have lexical `this`, no dynamic `this`'\cf4 , \cf5 () => \{\
 \
  it(\cf6 'bound at definition time, use `=>` '\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
    
\f1\b \cf4 var 
\f0\b0 \cf5 bound = 
\f1\b \cf4 new 
\f0\b0 \cf5 LexicallyBound()\cf4 ;\
    
\f1\b var 
\f0\b0 \cf5 fn = bound.getFunction()\cf4 ;\
    \
    \cf5 assert.strictEqual(fn()\cf4 , \cf5 bound)\cf4 ;\
  \cf5 \})\cf4 ;\
 \
  \cf5 it(\cf6 'can NOT bind a different context'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
    
\f1\b \cf4 var 
\f0\b0 \cf5 bound = 
\f1\b \cf4 new 
\f0\b0 \cf5 LexicallyBound()\cf4 ;\
    
\f1\b var 
\f0\b0 \cf5 fn = bound.getFunction()\cf4 ;\
    
\f1\b var 
\f0\b0 \cf5 anotherObj = \{\}\cf4 ;\
    
\f1\b var 
\f0\b0 \cf5 expected = bound\cf4 ;\
    \
    \cf5 assert.strictEqual(fn.call(anotherObj)\cf4 , \cf5 expected)\cf4 ;\
  \cf5 \})\cf4 ;\
  \
  \cf5 it(\cf6 '`arguments` doesnt work inside arrow functions'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
    
\f1\b \cf4 var 
\f0\b0 \cf5 bound = 
\f1\b \cf4 new 
\f0\b0 \cf5 LexicallyBound()\cf4 ;\
    
\f1\b var 
\f0\b0 \cf5 fn = bound.getArgumentsFunction()\cf4 ;\
    \
    \cf5 assert.equal(fn(\cf7 1\cf4 , \cf7 2\cf5 ).length\cf4 , \cf7 0\cf5 )\cf4 ;\
  \cf5 \})\cf4 ;\
  \
\cf5 \})\cf4 ;\
}