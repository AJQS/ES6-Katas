{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 55: Number - isInteger\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Number.isInteger()` determines if a value is an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
\
  
\f1\b \cf6 const 
\f0\b0 \cf4 isTrue = (what) => assert.equal(what\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  
\f1\b const 
\f0\b0 \cf4 isFalse = (what) => assert.equal(what\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
\
  \cf4 it(\cf5 '`isInteger` is a static function on `Number`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 whatType = \cf5 'function'\cf6 ;\
    \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Number.isInteger\cf6 , \cf4 whatType)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'zero in different ways'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 '0 is an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 zero = \cf7 0\cf6 ;\
      \cf4 isTrue(Number.isInteger(zero))\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '0.000'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      isTrue(Number.isInteger(\cf7 0.000\cf4 ))\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'the string "0" is NOT an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 stringZero = \cf5 "0"\cf6 ;\
      \cf4 isFalse(Number.isInteger(stringZero))\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'one in different ways'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 '0.111 + 0.889'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 rest = \cf7 0.889\cf6 ;\
      \cf4 isTrue(Number.isInteger(\cf7 0.111 \cf4 + rest))\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '0.5 + 0.2 + 0.2 + 0.1 = 1 ... isn`t it?'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 oneOrNot = \cf7 0.5 \cf4 + \cf7 0.2 \cf4 + \cf7 0.2 \cf4 + \cf7 0.1\cf6 ;\
      \cf4 isFalse(Number.isInteger(oneOrNot))\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'parseInt`ed "1" is an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 convertedToInt = Number.parseInt(\cf5 '1.01'\cf4 )\cf6 ;\
      \cf4 isTrue(Number.isInteger(convertedToInt))\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'what is not an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 '`Number()` is an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 numberOne = Number()\cf6 ;\
      \cf4 isTrue(Number.isInteger(numberOne))\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '`\{\}` is NOT an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 isit = Number.isInteger(\{\})\cf6 ;\
      \cf4 isFalse(isit)\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '`0.1` is not an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 isit = Number.isInteger(\cf7 0.1\cf4 )\cf6 ;\
      \cf4 isFalse(isit)\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '`Number.Infinity` is not an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 isit = Number.isInteger(Number.Infinity)\cf6 ;\
      \cf4 isFalse(isit)\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 '`NaN` is not an integer'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 isit = Number.isInteger(NaN)\cf6 ;\
      \cf4 isFalse(isit)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
\
}