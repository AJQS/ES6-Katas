{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 39: iterator - custom. Iterable is a protocol, when implemented allows objects \
// to customize their iteration behavior, such as what values are looped over in a for..of construct.\
// read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\
\
// To do: make all tests pass, leave the assert lines unchanged!\
// Follow the hints of the failure messages!\
\
\cf4 describe(\cf5 'A simple iterable without items inside, implementing the right protocol'\cf6 , \cf4 () => \{\
\
  
\f1\b \cf6 function 
\f0\b0 \cf4 iteratorFunction() \{\
    
\f1\b \cf6 return 
\f0\b0 \cf4 \{\
      next: 
\f1\b \cf6 function
\f0\b0 \cf4 ()\{\
        
\f1\b \cf6 return 
\f0\b0 \cf4 \{done: 
\f1\b \cf6 true
\f0\b0 \cf4 \}\
      \}\
    \}\
  \}\
\
  describe(\cf5 'the `iteratorFunction` needs to comply to the iterator protocol'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'must return an object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 iteratorFunction()\cf6 , \cf5 'object'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'the object must have a function assigned to a key `next`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 iteratorFunction().next\cf6 , \cf5 'function'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'calling `next()` must return an object with `\{done: true\}`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      assert.deepEqual(iteratorFunction().next()\cf6 , \cf4 \{done: 
\f1\b \cf6 true
\f0\b0 \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  
\f1\b let 
\f0\b0 \cf4 iterable\cf6 ;\
  \cf4 beforeEach(
\f1\b \cf6 function
\f0\b0 \cf4 () \{\
    iterable = \{\
      [Symbol.iterator]: iteratorFunction\
    \}\
  \})\cf6 ;\
\
  \cf4 describe(\cf5 'the iterable'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'must be an object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 iterable\cf6 , \cf5 'object'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'must have the iterator function assigned to the key `Symbol.iterator`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      assert.equal(iterable[Symbol.iterator]\cf6 , \cf4 iteratorFunction)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'using the iterable'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'it contains no values'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 let 
\f0\b0 \cf4 values=\cf5 ''\cf6 ;\
      
\f1\b for 
\f0\b0 \cf4 (
\f1\b \cf6 let 
\f0\b0 \cf4 value 
\f1\b \cf6 of 
\f0\b0 \cf4 iterable) \{\
        values += value\cf6 ;\
      \cf4 \}\
      assert.equal(values\cf6 , \cf5 ''\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'has no `.length` property'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 hasLengthProperty = iterable.hasOwnProperty(\cf5 'length'\cf4 )\cf6 ;\
      \cf4 assert.equal(hasLengthProperty\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 describe(\cf5 'can be converted to an array'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      it(\cf5 'using `Array.from()`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 arr = Array.from(iterable)\cf6 ;\
        \cf4 assert.equal(Array.isArray(arr)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \
      \cf4 it(\cf5 'where `.length` is still 0'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 arr = Array.from(iterable)\cf6 ;\
        
\f1\b const 
\f0\b0 \cf4 length = arr.length\cf6 ;\
        \cf4 assert.equal(length\cf6 , \cf7 0\cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}