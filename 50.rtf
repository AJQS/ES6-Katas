{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 50: Generator - iterator\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'a generator returns an iterable object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunction()\{\
    
\f1\b \cf6 yield 
\f0\b0 \cf7 1\cf6 ;\
    
\f1\b yield 
\f0\b0 \cf7 2\cf6 ;\
  \cf4 \}\
  \
  
\f1\b \cf6 let 
\f0\b0 \cf4 generator\cf6 ;\
  \
  \cf4 beforeEach(() => \{\
    generator = generatorFunction()\cf6 ;\
  \cf4 \})\cf6 ;\
    \
  \cf4 it(\cf5 'a generator returns an object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 typeOfTheGenerator = \cf5 'object'\cf6 ;\
    \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 generator\cf6 , \cf4 typeOfTheGenerator)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'a generator object has a key `Symbol.iterator`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 key = Symbol.iterator\cf6 ;\
    \cf4 assert.equal(key 
\f1\b \cf6 in 
\f0\b0 \cf4 generator\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'the `Symbol.iterator` is a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 theType = 
\f1\b \cf6 typeof 
\f0\b0 \cf4 generator[Symbol.iterator]\cf6 ;\
    \cf4 assert.equal(theType\cf6 , \cf5 'function'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'can be looped with `for-of`, which expects an iterable'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 function 
\f0\b0 \cf4 iterateForOf()\{\
      
\f1\b \cf6 for 
\f0\b0 \cf4 (
\f1\b \cf6 let 
\f0\b0 \cf4 value 
\f1\b \cf6 of 
\f0\b0 \cf4 generator) \{\
        \cf2 // no statements needed\
      \cf4 \}\
    \}\
    assert.doesNotThrow(iterateForOf)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}