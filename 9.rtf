{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 9: object-literals - basics\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'The object literal allows for new shorthands'\cf6 , \cf4 () => \{\
\
  
\f1\b \cf6 const 
\f0\b0 \cf4 x = \cf7 1\cf6 ;\
  
\f1\b const 
\f0\b0 \cf4 y = \cf7 2\cf6 ;\
\
  \cf4 describe(\cf5 'with variables'\cf6 , \cf4 () => \{\
    it(\cf5 'the short version for `\{x: x\}` is \{x\}'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 short = \{y\}\cf6 ;\
      \cf4 assert.deepEqual(short\cf6 , \cf4 \{y: y\})\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'works with multiple variables too'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 short = \{x\cf6 , \cf4 y\}\cf6 ;\
      \cf4 assert.deepEqual(short\cf6 , \cf4 \{x: x\cf6 , \cf4 y: y\})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'with methods'\cf6 , \cf4 () => \{\
    \
    
\f1\b \cf6 const 
\f0\b0 \cf4 func = () => func\cf6 ;\
\
    \cf4 it(\cf5 'using the name only uses it as key'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 short = \{func\}\cf6 ;\
      \cf4 assert.deepEqual(short\cf6 , \cf4 \{func: func\})\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'a different key must be given explicitly, just like before ES6'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 short = \{otherKey: func\}\cf6 ;\
      \cf4 assert.deepEqual(short\cf6 , \cf4 \{otherKey: func\})\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'inline functions, can written as `obj=\{func()\{\}\}` instead of `obj=\{func:function()\{\}\}`'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 short = \{\
        inlineFunc()\{\
          
\f1\b \cf6 return 
\f0\b0 \cf5 'I am inline'\cf6 ;\
        \cf4 \}\
      \}\cf6 ;\
      \cf4 assert.deepEqual(short.inlineFunc()\cf6 , \cf5 'I am inline'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}