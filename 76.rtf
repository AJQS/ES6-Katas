{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 76: Promise - creation \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'a promise can be created in multiple ways'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  describe(\cf5 'creating a promise fails when'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'using `Promise` as a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function 
\f0\b0 \cf4 callPromiseAsFunction() \{ \
        
\f1\b \cf6 new 
\f0\b0 \cf4 Promise()\cf6 ;\
      \cf4 \}\
      assert.throws(callPromiseAsFunction)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'no parameter is passed'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function 
\f0\b0 \cf4 promiseWithoutParams() \{\
        
\f1\b \cf6 new 
\f0\b0 \cf4 Promise()\cf6 ;\
      \cf4 \}\
      assert.throws(promiseWithoutParams)\cf6 ;  \
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'passing a non-callable throws too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 notAFunction = 
\f1\b \cf6 true
\f0\b0 ;\
      \cf4 assert.throws(() => \{ 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise(notAFunction)\cf6 ; \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'most commonly Promises get created using the constructor'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
    it(\cf5 'by passing a resolve function to it'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve) => resolve())\cf6 ;\
      
\f1\b return 
\f0\b0 \cf4 promise\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'by passing a resolve and a reject function to it'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve\cf6 , \cf4 reject) => reject())\cf6 ;\
      \
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'Expected promise to be rejected.'\cf4 )))\
        .catch(done)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'extending a `Promise`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'using `class X extends Promise\{\}` is possible'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 MyPromise 
\f1\b \cf6 extends 
\f0\b0 \cf4 Promise \{\}\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 MyPromise((resolve) => resolve())\cf6 ;\
      \
      \cf4 promise\
        .then(() => done())\
        .catch(e => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'Expected to resolve, but failed with: ' \cf4 + e)))\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'must call `super()` in the constructor if it wants to inherit/specialize the behavior'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 ResolvingPromise 
\f1\b \cf6 extends 
\f0\b0 \cf4 Promise \{\
        constructor() \{\
          
\f1\b \cf6 super
\f0\b0 \cf4 ()\cf6 ;\
        \cf4 \}\
      \}\
      \
      
\f1\b \cf6 return new 
\f0\b0 \cf4 ResolvingPromise()\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 '`Promise.all()` returns a promise that resolves when all given promises resolve'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'returns all results'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = Promise.all([\
        
\f1\b \cf6 new 
\f0\b0 \cf4 Promise(resolve => resolve(\cf7 1\cf4 ))\cf6 ,\
        
\f1\b new 
\f0\b0 \cf4 Promise(resolve => resolve(\cf7 2\cf4 ))\
      ])\cf6 ;\
      \
      \cf4 promise\
        .then(value => \{ assert.deepEqual(value\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf4 ])\cf6 ; \cf4 done()\cf6 ; \cf4 \})\
        .catch(e => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(e)))\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'is rejected if one rejects'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = Promise.all([\
        
\f1\b \cf6 new 
\f0\b0 \cf4 Promise(resolve => resolve(\cf7 1\cf4 ))\cf6 ,\
        
\f1\b new 
\f0\b0 \cf4 Promise(resolve => reject(\cf7 2\cf4 ))\
      ])\cf6 ;\
      \
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 NotRejectedError()))\
        .catch(() => done())\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 '`Promise.race()` returns the first settled promise'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'if it resolves first, the promises resolves'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 lateRejectedPromise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve\cf6 , \cf4 reject) => setTimeout(reject\cf6 , \cf7 100\cf4 ))\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 earlyResolvingPromise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise(resolve => resolve(\cf5 '1st :)'\cf4 ))\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 promise = Promise.race([lateRejectedPromise\cf6 ,\cf4 earlyResolvingPromise])\cf6 ;\
      \
      \cf4 promise\
        .then(value => \{ assert.deepEqual(value\cf6 , \cf5 '1st :)'\cf4 )\cf6 ; \cf4 done()\cf6 ; \cf4 \})\
        .catch(e => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'Expected to resolve, but failed with: ' \cf4 + e)))\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'if one of the given promises rejects first, the returned promise is rejected'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 earlyRejectedPromise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve\cf6 , \cf4 reject) => reject(\cf5 'I am a rejector'\cf4 ))\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 lateResolvingPromise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise(resolve => setTimeout(resolve\cf6 , \cf7 10\cf4 ))\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 promise = Promise.race([earlyRejectedPromise\cf6 , \cf4 lateResolvingPromise])\cf6 ;\
      \
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 NotRejectedError()))\
        .catch(value => \{ assert.equal(value\cf6 , \cf5 'I am a rejector'\cf4 )\cf6 ; \cf4 done()\cf6 ; \cf4 \})\
        .catch(done)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 '`Promise.resolve()` returns a resolving promise'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
    it(\cf5 'if no value given, it resolves with `undefined`'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = Promise.resolve()\cf6 ;\
      \
      \cf4 promise\
        .then(value => \{ assert.deepEqual(value\cf6 , 
\f1\b void 
\f0\b0 \cf7 0\cf4 )\cf6 ; \cf4 done()\cf6 ; \cf4 \})\
        .catch(e => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'Expected to resolve, but failed with: ' \cf4 + e)))\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'resolves with the given value'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = Promise.resolve(\cf5 'quick resolve'\cf4 )\cf6 ;\
      \
      \cf4 promise\
        .then(value => \{ assert.equal(value\cf6 , \cf5 'quick resolve'\cf4 )\cf6 ; \cf4 done()\cf6 ; \cf4 \})\
        .catch(e => done(e))\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 '`Promise.reject()` returns a rejecting promise'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
    it(\cf5 'if no value given, it rejects with `undefined`'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = Promise.reject()\cf6 ;\
      \
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 NotRejectedError()))\
        .catch(value => \{ assert.deepEqual(value\cf6 , 
\f1\b void 
\f0\b0 \cf7 0\cf4 )\cf6 ; \cf4 done()\cf6 ; \cf4 \})\
        .catch(done)\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'the parameter passed to `reject()` can be used in the `.catch()`'\cf6 , 
\f1\b function
\f0\b0 \cf4 (done) \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = Promise.reject(\cf5 'quick reject'\cf4 )\cf6 ;\
      \
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 NotRejectedError()))\
        .catch(value => \{ assert.deepEqual(value\cf6 , \cf5 'quick reject'\cf4 )\cf6 ; \cf4 done()\cf6 ; \cf4 \})\
        .catch(done)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\

\f1\b class 
\f0\b0 \cf4 NotRejectedError 
\f1\b \cf6 extends 
\f0\b0 \cf4 Error \{\
  constructor() \{\
    
\f1\b \cf6 super
\f0\b0 \cf4 ()\cf6 ;\
    
\f1\b this
\f0\b0 \cf4 .message = \cf5 'Expected promise to be rejected.'\cf6 ;\
  \cf4 \}\
\}\
\
}