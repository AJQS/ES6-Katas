{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 25: class - extends\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'classes can inherit from another'\cf6 , \cf4 () => \{\
\
  describe(\cf5 'the default super class is Object'\cf6 , \cf4 () => \{\
  \
    it(\cf5 'class A is an instance of Object'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 A \{\}\
      \
      assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 A() 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 Object\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \
    \cf4 it(\cf5 'B extends A, B is also instance of Object'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 A \{\}\
      
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{\}\
      \
      assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B() 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 A\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B() 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 Object\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'class can extend `null`, not an instance of Object'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 NullClass 
\f1\b \cf6 extends null 
\f0\b0 \cf4 \{\}\
      \
      
\f1\b \cf6 let 
\f0\b0 \cf4 nullInstance = 
\f1\b \cf6 new 
\f0\b0 \cf4 NullClass()\cf6 ;\
      \cf4 assert.equal(nullInstance 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 Object\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'instance of'\cf6 , \cf4 () => \{\
    it(\cf5 'when B inherits from A, `new B()` is also an instance of A'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 A\{\}\
      
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{\}\
      \
      assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B() 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 A\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'extend over multiple levels'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 class 
\f0\b0 \cf4 A \{\}\
      
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{\}\
      
\f1\b \cf6 class 
\f0\b0 \cf4 C 
\f1\b \cf6 extends 
\f0\b0 \cf4 B \{\}\
      \
      
\f1\b \cf6 let 
\f0\b0 \cf4 instance = 
\f1\b \cf6 new 
\f0\b0 \cf4 C()\cf6 ;\
      \cf4 assert.equal(instance 
\f1\b \cf6 instanceof 
\f0\b0 \cf4 A\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\cf4 \})\cf6 ;\
}