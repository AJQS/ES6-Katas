{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 59: Reflect - apply \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Reflect.apply` calls a target function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  it(\cf5 'it is a static method'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 expectedType = \cf5 'function'\cf6 ;\
    \
    \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Reflect.apply\cf6 , \cf4 expectedType)\
  \})\cf6 ;\
  \
  \cf4 it(\cf5 'it calls a callable, e.g. a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 fn = () => \cf7 42\cf6 ;\
    \cf2 // Modified by incorrect assertion the Reflect.apply method need three params view specification on https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply \
    // https://github.com/tddbin/es6katas.org/issues/31\
    \cf4 assert.equal(Reflect.apply(fn\cf6 ,\cf4 undefined\cf6 ,\cf4 [])\cf6 , \cf7 42\cf4 )\cf6 ; \
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'passing it a non-callable throws a TypeError'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 applyOnUncallable = () => \{ \
      Reflect.apply(Array)\cf6 ; \
    \cf4 \}\cf6 ;\
    \
    \cf4 assert.throws(applyOnUncallable\cf6 , \cf4 TypeError)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'the second argument is the scope (or the `this`)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 FourtyTwo \{\
      constructor() \{ 
\f1\b \cf6 this
\f0\b0 \cf4 .value = \cf7 42\cf4 \}\
      fn() \{
\f1\b \cf6 return this
\f0\b0 \cf4 .value\}\
    \}\
    
\f1\b \cf6 let 
\f0\b0 \cf4 instance = 
\f1\b \cf6 new 
\f0\b0 \cf4 FourtyTwo()\cf6 ;\
    \
    
\f1\b const 
\f0\b0 \cf4 fourtyTwo = Reflect.apply(instance.fn\cf6 , \cf4 instance\cf6 , \cf4 instance)\cf6 ;\
    \
    \cf4 assert.deepEqual(fourtyTwo\cf6 , \cf7 42\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'the 3rd argument is an array of parameters passed to the call'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 emptyArrayWithFiveElements = Reflect.apply(Array\cf6 ,\cf4 undefined\cf6 ,\cf4 [\cf7 5\cf4 ])\cf6 ;\
    \
    \cf4 assert.deepEqual(emptyArrayWithFiveElements.fill(\cf7 42\cf4 )\cf6 , \cf4 [\cf7 42\cf6 , \cf7 42\cf6 , \cf7 42\cf6 , \cf7 42\cf6 , \cf7 42\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}