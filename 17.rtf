{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 17: unicode - in strings\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'unicode strings'\cf6 , \cf4 () => \{\
\
  it(\cf5 'are \cf6 \\\\\cf5 u prefixed'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 nuclear = \cf5 '\cf6 \\u2622\cf5 '\cf6 ;\
    \cf4 assert.equal(nuclear\cf6 , \cf5 '\uc0\u9762 '\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'value is 4 bytes/digits'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 nuclear = \cf5 '\cf6 \\u2622\cf5 '\cf6 ;\
    \cf4 assert.equal(\cf5 `no more \cf4 $\{nuclear\}\cf5 `\cf6 , \cf5 'no more \uc0\u9762 '\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'value is hexadecimal'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 nuclear = \cf5 `\cf6 \\u006E\\u006F\cf5  more \cf6 \\u2622\cf5 `\cf6 ;\
    \cf4 assert.equal(nuclear\cf6 , \cf5 'no more \uc0\u9762 '\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'curly braces may surround the value'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 nuclear = \cf5 `\cf6 \\u\{006E\}\\u\{006F\}\cf5  more \cf6 \\u2622\cf5 `\cf6 ;\
    \cf4 assert.equal(nuclear\cf6 , \cf5 'no more \uc0\u9762 '\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
}