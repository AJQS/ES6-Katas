{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 35: Symbol.for - retrieves or creates a runtime-wide symbol\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Symbol.for` for registering Symbols globally'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  it(\cf5 'creates a new symbol (check via `typeof`)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 symbolType = 
\f1\b \cf6 typeof 
\f0\b0 \cf4 Symbol.for(\cf5 'symbol name'\cf4 )\cf6 ;\
    \cf4 assert.equal(symbolType\cf6 , \cf5 'symbol'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'stores the symbol in a runtime-wide registry and retrieves it from it'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 sym = Symbol.for(\cf5 'new symbol'\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 sym1 = Symbol.for(\cf5 'new symbol'\cf4 )\cf6 ;\
    \
    \cf4 assert.equal(sym\cf6 , \cf4 sym1)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'is different to `Symbol()` which creates a symbol every time and does not store it'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 globalSymbol = Symbol.for(\cf5 'new symbol'\cf4 )\cf6 ;\
    
\f1\b var 
\f0\b0 \cf4 localSymbol = Symbol(\cf5 'new symbol'\cf4 )\cf6 ;\
    \
    \cf4 assert.notEqual(globalSymbol\cf6 , \cf4 localSymbol)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 '`.toString()` on a Symbol'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    
\f1\b \cf6 const 
\f0\b0 \cf4 localSymbol = Symbol(\cf5 'new symbol'\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 symbolFromRegistry = Symbol.for(\cf5 'new symbol'\cf4 )\cf6 ;\
    \
    \cf4 it(\cf5 'also contains the key given to `Symbol.for()`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 description = localSymbol.toString()\cf6 ;\
      \cf4 assert.equal(description\cf6 , \cf5 'Symbol(new symbol)'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \
    \cf4 describe(\cf5 'NOTE: the description of two different symbols'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      it(\cf5 'might be the same'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 localDescription = localSymbol.toString()\cf6 ;\
        
\f1\b const 
\f0\b0 \cf4 fromRegistryDescription = symbolFromRegistry.toString()\cf6 ;\
        \
        \cf4 assert.equal(localDescription\cf6 , \cf4 fromRegistryDescription)\cf6 ;\
      \cf4 \})\cf6 ;\
      \
      \cf4 it(\cf5 'but the symbols are not the same!'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        assert.notEqual(localSymbol\cf6 , \cf4 symbolFromRegistry)\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;    \
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}