{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 49: Generator - creation\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'generator can be created in multiple ways'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  it(\cf5 'the most common way is by adding `*` after `function`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 function
\f0\b0 \cf4 * g() \{\}\
    assertIsGenerator(g())\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'as a function expression, by adding a `*` after `function`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 g = 
\f1\b \cf6 function
\f0\b0 \cf4 *() \{\}\cf6 ;\
    \cf4 assertIsGenerator(g())\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'inside an object by prefixing the function name with `*`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 obj = \{\
      *g() \{\}\
    \}\cf6 ;\
    \cf4 assertIsGenerator(obj.g())\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'computed generator names, are just prefixed with a `*`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 generatorName = \cf5 'g'\cf6 ;\
    
\f1\b let 
\f0\b0 \cf4 obj = \{\
      *[generatorName]() \{\}\
    \}\cf6 ;\
    \cf4 assertIsGenerator(obj.g())\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'inside a class the same way'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 generatorName = \cf5 'g'\cf6 ;\
    
\f1\b class 
\f0\b0 \cf4 Klazz \{\
      *[generatorName]() \{\}\
    \}\
    assertIsGenerator(
\f1\b \cf6 new 
\f0\b0 \cf4 Klazz().g())\cf6 ;\
  \cf4 \})\cf6 ;\
\
  
\f1\b function 
\f0\b0 \cf4 assertIsGenerator(gen) \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 toStringed = \cf5 '' \cf4 + gen\cf6 ;\
    \cf4 assert.equal(toStringed\cf6 , \cf5 '[object Generator]'\cf4 )\cf6 ;\
  \cf4 \}\
  \
\})\cf6 ;\
 \cf4 No newline at end of file\
\
}