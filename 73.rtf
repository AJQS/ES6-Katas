{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 73: Generator - `return` inside a generator is special\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`return` in a generator function is special'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  describe(\cf5 'the returned value is an IteratorResult (just like any value returned via `yield`)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    it(\cf5 'returns an IteratorResult (an object with the properties `value` and `done`)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunction() \{ 
\f1\b \cf6 return 
\f0\b0 \cf7 1\cf6 ; \cf4 \}\
      
\f1\b \cf6 const 
\f0\b0 \cf4 returned = generatorFunction().next()\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 propertyNames = [\cf5 'value'\cf6 ,\cf5 'done'\cf4 ]\cf6 ;\
      \cf4 assert.deepEqual(Object.keys(returned)\cf6 , \cf4 propertyNames)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'the property `value` is the value given after the `return` statement'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunction() \{ 
\f1\b \cf6 return 
\f0\b0 \cf7 23\cf6 ; \cf4 \}\
      
\f1\b \cf6 const 
\f0\b0 \cf4 \{value\} = generatorFunction().next()\cf6 ;\
      \cf4 assert.equal(value\cf6 , \cf7 23\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'the property `done` is true'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunction() \{ 
\f1\b \cf6 return 
\f0\b0 \cf7 42\cf6 ; \cf4 \}\
      
\f1\b \cf6 const 
\f0\b0 \cf4 \{done\} = generatorFunction().next()\cf6 ;\
      \cf4 assert.equal(done\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'NOTE: `yield` does not return `done=true` but `done=false`!'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunction() \{ 
\f1\b \cf6 yield 
\f0\b0 \cf7 1\cf6 ; \cf4 \}\
      
\f1\b \cf6 const 
\f0\b0 \cf4 returned = generatorFunction().next()\cf6 ;\
      \cf4 assert.deepEqual(returned\cf6 , \cf4 \{value: \cf7 1\cf6 , \cf4 done: 
\f1\b \cf6 false
\f0\b0 \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'a missing `return` returns \{value: undefined, done: true\}'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunction() \{\}\
      
\f1\b \cf6 const 
\f0\b0 \cf4 returned = generatorFunction().next()\cf6 ;\
      \cf4 assert.deepEqual(returned\cf6 , \cf4 \{value: 
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf6 , \cf4 done: 
\f1\b \cf6 true
\f0\b0 \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'mixing `return` and `yield`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunctionWithYieldAndReturn() \{\
      
\f1\b \cf6 yield 
\f0\b0 \cf7 1\cf6 ;\
      
\f1\b return 
\f0\b0 \cf7 2\cf6 ;\
    \cf4 \}\
    \
    it(\cf5 'is possible'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 iterator = generatorFunctionWithYieldAndReturn()\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 values = [\
        iterator.next()\cf6 ,\
        \cf4 iterator.next()\
      ]\cf6 ;\
      \cf4 assert.deepEqual(values\cf6 , \cf4 [\{value: \cf7 1\cf6 , \cf4 done: 
\f1\b \cf6 false
\f0\b0 \cf4 \}\cf6 , \cf4 \{value: \cf7 2\cf6 , \cf4 done: 
\f1\b \cf6 true
\f0\b0 \cf4 \}])\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'the mix behaves different to two `yield`s'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 iterator = generatorFunctionWithYieldAndReturn()\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 values = [\cf7 1\cf4 ]\cf6 ;\
      \cf4 assert.deepEqual(Array.from(iterator)\cf6 , \cf4 values)\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'two `yield`s returning values'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunctionWithTwoYields() \{\
        
\f1\b \cf6 yield 
\f0\b0 \cf7 1\cf6 ;\
        
\f1\b yield 
\f0\b0 \cf7 2\cf6 ;\
      \cf4 \}\
      assert.deepEqual(Array.from(generatorFunctionWithTwoYields())\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf4 ])\cf6 ;\
    \cf4 \})\cf6 ;\
\
    \cf4 it(\cf5 'returning a yielded value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 function
\f0\b0 \cf4 * generatorFunction() \{\
        
\f1\b \cf6 return yield 
\f0\b0 \cf7 1\cf6 ;\
      \cf4 \}\
      
\f1\b \cf6 const 
\f0\b0 \cf4 iterator = generatorFunction()\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 values = [\
        iterator.next().value\cf6 ,\
        \cf4 iterator.next(\cf7 2\cf4 ).value\
      ]\cf6 ;\
      \cf4 assert.deepEqual(values\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf4 ])\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}