{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red191\green100\blue38;
\red153\green168\blue186;\red88\green118\blue71;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c74902\c39216\c14902;
\csgenericrgb\c60000\c65882\c72941;\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh21000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 40: iterator - one example usage. Build an iterable and use it with some built-in ES6 constructs.\
// To do: make all tests pass, leave the assert lines unchanged!\
\
// Consumable users: \
// - `consumableUser` contains a consumable user, \
// - `anyLeft` tells if there is any user left that can be consumed.  \

\f1\b \cf4 class 
\f0\b0 \cf5 ConsumableUsers \{\
  constructor() \{\
    
\f1\b \cf4 this
\f0\b0 \cf5 .users = [\cf6 'Alice'\cf4 , \cf6 'Bob'\cf5 ]\cf4 ;\
    
\f1\b this
\f0\b0 \cf5 .empty = 
\f1\b \cf4 false
\f0\b0 ;\
  \cf5 \}\
  
\f1\b \cf4 get 
\f0\b0 \cf5 nextUser() \{\
    
\f1\b \cf4 if 
\f0\b0 \cf5 (
\f1\b \cf4 this
\f0\b0 \cf5 .users.length > \cf7 0\cf5 ) \{\
      
\f1\b \cf4 return 
\f0\b0 \cf6 `user: \cf5 $\{
\f1\b \cf4 this
\f0\b0 \cf5 .users.shift()\}\cf6 `\cf4 ;\
    \cf5 \}\
    
\f1\b \cf4 this
\f0\b0 \cf5 .empty = 
\f1\b \cf4 true
\f0\b0 ;\
    
\f1\b return void 
\f0\b0 \cf7 0\cf4 ;\
  \cf5 \}\
  
\f1\b \cf4 get 
\f0\b0 \cf5 anyLeft() \{\
    
\f1\b \cf4 return this
\f0\b0 \cf5 .empty\cf4 ;\
  \cf5 \}\
\}\
\
describe(\cf6 'Iterator usages'\cf4 , \cf5 () => \{\
\
  
\f1\b \cf4 let 
\f0\b0 \cf5 usersIterable\cf4 ;\
  \cf5 beforeEach(
\f1\b \cf4 function
\f0\b0 \cf5 ()\{\
    
\f1\b \cf4 const 
\f0\b0 \cf5 consumableUsers = 
\f1\b \cf4 new 
\f0\b0 \cf5 ConsumableUsers()\cf4 ;\
    
\f1\b function 
\f0\b0 \cf5 iteratorFunction() \{\
      
\f1\b \cf4 return 
\f0\b0 \cf5 \{\
        next: 
\f1\b \cf4 function
\f0\b0 \cf5 () \{\
          
\f1\b \cf4 return 
\f0\b0 \cf5 \{value: consumableUsers.nextUser\cf4 , \cf5 done: consumableUsers.anyLeft\}\
        \}\
      \}\
    \}\
    \
    usersIterable = \{\}\cf4 ;\
    \cf5 usersIterable[Symbol.iterator] = iteratorFunction\cf4 ;\
  \cf5 \})\cf4 ;\
  \
  \cf5 describe(\cf6 'create an iterator/iterable'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
    it(\cf6 'the `usersIterable` should be iterable'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
      
\f1\b \cf4 const 
\f0\b0 \cf5 isIterable = Symbol.iterator 
\f1\b \cf4 in 
\f0\b0 \cf5 usersIterable\cf4 ;\
      \cf5 assert.equal(isIterable\cf4 , 
\f1\b true
\f0\b0 \cf5 )\cf4 ;\
    \cf5 \})\cf4 ;\
    \
    \cf5 it(\cf6 'the iterator of `usersIterable` should return an object'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
      
\f1\b \cf4 const 
\f0\b0 \cf5 iterator = usersIterable[Symbol.iterator]()\cf4 ;\
      \cf5 assert.equal(
\f1\b \cf4 typeof 
\f0\b0 \cf5 iterator\cf4 , \cf6 'object'\cf5 )\cf4 ;\
    \cf5 \})\cf4 ;\
    \
    \cf5 it(\cf6 'the iterator of `usersIterable` should have a next function'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
      
\f1\b \cf4 const 
\f0\b0 \cf5 iterator = usersIterable[Symbol.iterator]()\cf4 ;\
      \cf5 assert.equal(
\f1\b \cf4 typeof 
\f0\b0 \cf5 iterator.next\cf4 , \cf6 'function'\cf5 )\cf4 ;\
    \cf5 \})\cf4 ;\
  \cf5 \})\cf4 ;\
  \
  \cf5 describe(\cf6 'fill the iterable with content using `ConsumableUsers`'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
    \
    describe(\cf6 'using the iterator'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
      
\f1\b \cf4 let 
\f0\b0 \cf5 iterator\cf4 ;\
      \cf5 beforeEach(
\f1\b \cf4 function
\f0\b0 \cf5 ()\{\
        iterator = usersIterable[Symbol.iterator]()\cf4 ;\
      \cf5 \})\cf4 ;\
      \cf5 it(\cf6 'should return `Alice` as first user'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
        
\f1\b \cf4 const 
\f0\b0 \cf5 firstItem = iterator.next()\cf4 ;\
        \cf5 assert.deepEqual(firstItem\cf4 , \cf5 \{value: \cf6 "user: Alice"\cf4 , \cf5 done: 
\f1\b \cf4 false
\f0\b0 \cf5 \})\cf4 ;\
      \cf5 \})\cf4 ;\
      \cf5 it(\cf6 'should return `Bob` as second user'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
        iterator.next()\cf4 ; \cf2 // drop the first item\
        
\f1\b \cf4 const 
\f0\b0 \cf5 secondItem = iterator.next()\cf4 ;\
        \cf5 assert.deepEqual(secondItem\cf4 , \cf5 \{value: \cf6 "user: Bob"\cf4 , \cf5 done: 
\f1\b \cf4 false
\f0\b0 \cf5 \})\cf4 ;\
      \cf5 \})\cf4 ;\
      \cf5 it(\cf6 'should return `done:true`, which means there are no more items'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
        iterator.next()\cf4 ;\
        \cf5 iterator.next()\cf4 ;\
        
\f1\b const 
\f0\b0 \cf5 beyondLast = iterator.next()\cf4 ;\
        \cf5 assert.deepEqual(beyondLast\cf4 , \cf5 \{value: 
\f1\b \cf4 void 
\f0\b0 \cf7 0\cf4 , \cf5 done: 
\f1\b \cf4 true
\f0\b0 \cf5 \})\cf4 ;\
      \cf5 \})\
    \})\cf4 ;\
    \
    \
    \cf5 describe(\cf6 'using built-in constructs'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
      it(\cf6 'use `Array.from()` to convert an iterable to an array'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
        
\f1\b \cf4 const 
\f0\b0 \cf5 users = Array.from(usersIterable)\cf4 ;\
        \cf5 assert.deepEqual(users\cf4 , \cf5 [\cf6 'user: Alice'\cf4 , \cf6 'user: Bob'\cf5 ])\cf4 ;\
      \cf5 \})\cf4 ;\
      \cf5 it(\cf6 'use for-of to loop over an iterable'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
        
\f1\b \cf4 const 
\f0\b0 \cf5 users = []\cf4 ;\
        
\f1\b for 
\f0\b0 \cf5 (
\f1\b \cf4 let 
\f0\b0 \cf5 user 
\f1\b \cf4 of 
\f0\b0 \cf5 usersIterable) users.push(user)\cf4 ;\
        \cf5 assert.deepEqual(users\cf4 , \cf5 [\cf6 'user: Alice'\cf4 , \cf6 'user: Bob'\cf5 ])\cf4 ;\
      \cf5 \})\cf4 ;\
      \cf5 it(\cf6 'use the spread-operator to convert/add iterable to an array'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
        
\f1\b \cf4 const 
\f0\b0 \cf5 users = [\cf6 'noname'\cf4 , \cf5 ...usersIterable]\cf4 ;\
        \cf5 assert.deepEqual(users\cf4 , \cf5 [\cf6 'noname'\cf4 , \cf6 'user: Alice'\cf4 , \cf6 'user: Bob'\cf5 ])\cf4 ;\
      \cf5 \})\cf4 ;\
      \cf5 it(\cf6 'destructure an iterable like an array'\cf4 , 
\f1\b function
\f0\b0 \cf5 () \{\
        
\f1\b \cf4 const 
\f0\b0 \cf5 [firstUser\cf4 , \cf5 secondUser] = usersIterable\cf4 ;\
        \cf5 assert.equal(firstUser\cf4 , \cf6 'user: Alice'\cf5 )\cf4 ;\
        \cf5 assert.equal(secondUser\cf4 , \cf6 'user: Bob'\cf5 )\cf4 ;\
      \cf5 \})\
    \})\cf4 ;\
  \cf5 \})\cf4 ;\
\
\cf5 \})\cf4 ;\
}