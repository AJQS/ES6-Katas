{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red0\green0\blue0;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgray\c0\c0;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww16200\viewh12600\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 30: array - `Array.of` static method\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Array.of` creates an array with the given arguments as elements'\cf6 , \cf4 () => \{\
  \
  it(\cf5 'dont mix it up with `Array(10)`, where the argument is the array length'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 arr = Array.of(\cf7 10\cf4 )\cf6 ;\
    \
    \cf4 assert.deepEqual(arr\cf6 , \cf4 [\cf7 10\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'puts all arguments into array elements'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 arr = Array.of(\cf7 1\cf6 ,\cf7 2\cf4 )\cf6 ;\
    \
    \cf4 assert.deepEqual(arr\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'takes any kind and number of arguments'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 starter = [\cf7 1\cf6 , \cf7 2\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 end = [\cf7 3\cf6 , \cf5 '4'\cf4 ]\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 arr = Array.of([...starter]\cf6 , \cf4 ...end)\cf6 ;\
    \
    \cf4 assert.deepEqual(arr\cf6 , \cf4 [[\cf7 1\cf6 , \cf7 2\cf4 ]\cf6 , \cf7 3\cf6 , \cf5 '4'\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}