{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 28: class - super in constructor\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'class'\cf6 , \cf4 () => \{\
\
  it(\cf5 'if you `extend` a class, use `super()` to call the parent constructor'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{constructor() \{ 
\f1\b \cf6 this
\f0\b0 \cf4 .levels = \cf7 1\cf6 ; \cf4 \}\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{\
      constructor() \{\
        
\f1\b \cf6 super
\f0\b0 \cf4 ()\cf6 ;\
        
\f1\b this
\f0\b0 \cf4 .levels++\cf6 ; \
      \cf4 \}\
    \}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B().levels\cf6 , \cf7 2\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 '`super()` may also take params'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{constructor(startValue=\cf7 1\cf6 , \cf4 addTo=\cf7 1\cf4 ) \{ 
\f1\b \cf6 this
\f0\b0 \cf4 .counter = startValue + addTo\cf6 ; \cf4 \}\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{\
      constructor(...args) \{ \
        
\f1\b \cf6 super
\f0\b0 \cf4 (...args)\cf6 ;\
        
\f1\b this
\f0\b0 \cf4 .counter++\cf6 ; \
      \cf4 \}\
    \}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B(\cf7 42\cf6 , \cf7 2\cf4 ).counter\cf6 , \cf7 45\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'it is important where you place your `super()` call!'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A \{inc() \{ 
\f1\b \cf6 this
\f0\b0 \cf4 .countUp = \cf7 1\cf6 ; \cf4 \}\}\
    
\f1\b \cf6 class 
\f0\b0 \cf4 B 
\f1\b \cf6 extends 
\f0\b0 \cf4 A \{\
      inc() \{ \
        
\f1\b \cf6 this
\f0\b0 \cf4 .countUp = \cf7 2\cf6 ; \
        
\f1\b super
\f0\b0 \cf4 .inc()\cf6 ;\
        
\f1\b return this
\f0\b0 \cf4 .countUp\cf6 ;\
      \cf4 \}\
    \}\
    \
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 B().inc()\cf6 , \cf7 1\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'use `super.constructor` to find out if there is a parent constructor'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 A 
\f1\b \cf6 extends null 
\f0\b0 \cf4 \{\
      constructor() \{\
        
\f1\b \cf6 super
\f0\b0 \cf4 ()\cf6 ;\
        
\f1\b this
\f0\b0 \cf4 .isTop = !
\f1\b \cf6 super
\f0\b0 \cf4 .constructor\cf6 ;\
      \cf4 \}\
    \}\
\
    assert.equal(
\f1\b \cf6 new 
\f0\b0 \cf4 A().isTop\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}