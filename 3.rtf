{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 3: template strings - tagged\
// To do: make all tests pass, leave the asserts unchanged!\
\
\cf4 describe(\cf5 'tagged template strings, are an advanced form of template strings'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  it(\cf5 'syntax: prefix the template string with a function to call (without "()" around it)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 function 
\f0\b0 \cf4 tagFunction(s) \{\
      
\f1\b \cf6 return 
\f0\b0 \cf4 s.toString()\cf6 ;\
    \cf4 \}\
    
\f1\b \cf6 var 
\f0\b0 \cf4 evaluated = tagFunction \cf5 `template string`\cf6 ;\
    \cf4 assert.equal(evaluated\cf6 , \cf5 'template string'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'the function can access each part of the template'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
    describe(\cf5 'the 1st parameter - receives only the pure strings of the template string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
      
\f1\b \cf6 function 
\f0\b0 \cf4 tagFunction(strings) \{\
        
\f1\b \cf6 return 
\f0\b0 \cf4 strings\cf6 ;\
      \cf4 \}\
\
      it(\cf5 'the strings are an array'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 var 
\f0\b0 \cf4 result = [\cf5 'template string'\cf4 ]\cf6 ;\
        \cf4 assert.deepEqual(tagFunction\cf5 `template string`\cf6 , \cf4 result)\cf6 ;\
      \cf4 \})\cf6 ;\
\
      \cf4 it(\cf5 'expressions are NOT passed to it'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 var 
\f0\b0 \cf4 tagged = tagFunction\cf5 `one\cf4 $\{\cf7 23\cf4 \}\cf5 two`\cf6 ; \
        \cf4 assert.deepEqual(tagged\cf6 , \cf4 [\cf5 'one'\cf6 , \cf5 'two'\cf4 ])\cf6 ;\
      \cf4 \})\cf6 ;\
\
    \cf4 \})\cf6 ;\
\
    \cf4 describe(\cf5 'the 2nd and following parameters - contain the values of the processed substitution'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
      
\f1\b \cf6 var 
\f0\b0 \cf4 one = \cf7 1\cf6 ;\
      
\f1\b var 
\f0\b0 \cf4 two = \cf7 2\cf6 ;\
      
\f1\b var 
\f0\b0 \cf4 three = \cf7 3\cf6 ;\
      \cf4 it(\cf5 'the 2nd parameter contains the first expression`s value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 function 
\f0\b0 \cf4 firstValueOnly(strings\cf6 , \cf4 firstValue) \{ \
          
\f1\b \cf6 return 
\f0\b0 \cf4 firstValue\cf6 ;\
        \cf4 \}\
        assert.equal(firstValueOnly\cf5 `uno \cf4 $\{one\}\cf5 , dos \cf4 $\{two\}\cf5 `\cf6 , \cf7 1\cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
\
      \cf4 it(\cf5 'the 3rd parameter contains the second expression`s value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 function 
\f0\b0 \cf4 firstValueOnly(strings\cf6 , \cf4 firstValue\cf6 , \cf4 secondValue) \{ \
          
\f1\b \cf6 return 
\f0\b0 \cf4 secondValue\cf6 ;\
        \cf4 \}\
        assert.equal(firstValueOnly\cf5 `uno \cf4 $\{one\}\cf5 , dos \cf4 $\{two\}\cf5 `\cf6 , \cf7 2\cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
\
      \cf4 it(\cf5 'using ES6 rest syntax, all values can be accessed via one variable'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 function 
\f0\b0 \cf4 valuesOnly(stringsArray\cf6 , \cf4 ...allValues) \{ \cf2 // using the new ES6 rest syntax\
          
\f1\b \cf6 return 
\f0\b0 \cf4 allValues\cf6 ;\
        \cf4 \}\
        assert.deepEqual(valuesOnly\cf5 `uno=\cf4 $\{one\}\cf5 , dos=\cf4 $\{two\}\cf5 , tres=\cf4 $\{three\}\cf5 `\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf6 , \cf7 3\cf4 ])\cf6 ;\
      \cf4 \})\cf6 ;\
\
    \cf4 \})\cf6 ;     \
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
}