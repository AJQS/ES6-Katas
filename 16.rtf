{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 16: object-literal - computed properties\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'Object literal properties may be computed values'\cf6 , \cf4 () => \{\
\
  it(\cf5 'a computed property `x` needs to be surrounded by `[]`'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 propertyName = \cf5 'x'\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 obj = \{[propertyName]: \cf7 1\cf4 \}\cf6 ;\
    \cf4 assert.equal(obj.x\cf6 , \cf7 1\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'can also get a function assigned'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 key = \cf5 'func'\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 obj = \{[key]() \{ 
\f1\b \cf6 return 
\f0\b0 \cf5 'seven'\cf4 \}\}\cf6 ;\
    \cf4 assert.equal(obj.func()\cf6 , \cf5 'seven'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'the key may also be the result of a function call'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 getName = () => \cf5 'propertyName'\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 obj = \{[[getName()]]() \{
\f1\b \cf6 return 
\f0\b0 \cf5 'seven'\cf4 \}\}\cf6 ;\
    \cf4 assert.equal(obj.propertyName()\cf6 , \cf5 'seven'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'the key can also be constructed by an expression'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 what = \cf5 'Name'\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 obj = \{[\cf5 'property' \cf4 + what]: 
\f1\b \cf6 null
\f0\b0 \cf4 \}\cf6 ;\
    \cf4 assert.equal(\cf5 'propertyName' 
\f1\b \cf6 in 
\f0\b0 \cf4 obj\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'accessor keys can be computed names too'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 obj = \{\
      get [\cf5 'key'\cf4 ]() \{
\f1\b \cf6 return 
\f0\b0 \cf7 1\cf4 \}\
    \}\cf6 ;\
    \cf4 assert.equal(obj.key\cf6 , \cf7 1\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\cf4 \})\cf6 ;\
}