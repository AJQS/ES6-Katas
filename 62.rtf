{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 62: Map - `has()` \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`map.has()` indicates whether an element with a key exists'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  it(\cf5 'finds nothing in an empty map'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 hasKey = map.has(
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf4 )\cf6 ;\
    \cf4 assert.equal(hasKey\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'finds an element by it`s key'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map([[\cf5 'key'\cf6 , \cf5 'VALUE'\cf4 ]])\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 hasKey = map.has(\cf5 'key'\cf4 )\cf6 ;\
    \cf4 assert.equal(hasKey\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'finds `undefined` as key too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map([[
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf6 , \cf5 'not defined key'\cf4 ]])\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 hasUndefinedAsKey = map.has()\cf6 ;\
    \cf4 assert.equal(hasUndefinedAsKey\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'does not coerce keys'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map([[\cf5 '1'\cf6 , \cf5 'one'\cf4 ]])\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 findsStringOne = 
\f1\b \cf6 true
\f0\b0 ;\
    \cf4 assert.equal(map.has(\cf5 '1'\cf4 )\cf6 , \cf4 findsStringOne)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'after removal (using `map.delete(<key>)`) it doesnt find the element anymore'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map([[\cf7 1\cf6 , \cf5 'one'\cf4 ]])\cf6 ;\
    \cf4 map.delete(\cf7 1\cf4 )\cf6 ;\
    \cf4 assert.equal(map.has(\cf7 1\cf4 )\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'adding an item (using `map.set(key, value)`) later will make `has()` return true'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf6 ,\cf5 'one'\cf4 )\cf6 ;\
    \cf4 assert.equal(map.has(
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}