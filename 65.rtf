{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 65: Set - API overview\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Set` API overview'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
\
  
\f1\b \cf6 const 
\f0\b0 \cf4 api = [\cf5 'size'\cf6 , \cf5 'add'\cf6 , \cf5 'clear'\cf6 , \cf5 'delete'\cf6 , \cf5 'entries'\cf6 , \cf5 'forEach'\cf6 , \cf5 'has'\cf6 , \cf5 'keys'\cf6 , \cf5 'values'\cf4 ]\cf6 ;\
  
\f1\b let 
\f0\b0 \cf4 set\cf6 ;\
  \cf4 beforeEach(
\f1\b \cf6 function
\f0\b0 \cf4 () \{\
    set = 
\f1\b \cf6 new 
\f0\b0 \cf4 Set(api)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'a Set can be created from an array'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 set = 
\f1\b \cf6 new 
\f0\b0 \cf4 Set(api)\cf6 ;\
    \cf4 assert.deepEqual(Array.from(set)\cf6 , \cf4 api)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 '`size` is the number of values'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 theSize = set.size\cf6 ;\
    \cf4 assert.equal(theSize\cf6 , \cf4 api.length)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 '`add()` appends the given value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \cf2 // hint: to make the example consistent you can add the `Symbol.iterator` to `set`\
    // strongly speaking it is missing in the API.\
    \cf4 set.add(\cf5 'Symbol.iterator'\cf4 )\cf6 ;\
    \cf4 assert.equal(set.size\cf6 , \cf4 api.length + \cf7 1\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 '`clear()` removes all elements'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    set.clear()\cf6 ;\
    \cf4 assert.equal(set.size\cf6 , \cf7 0\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 '`delete()` removes the given value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    set.delete(\cf5 'add'\cf4 )\cf6 ;\
    \cf4 assert.equal(set.size\cf6 , \cf4 api.length - \cf7 1\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 '`entries()` returns an iterator for all values'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 expectedEntries = api.map(entry => [entry\cf6 , \cf4 entry])\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 actualEntries = set.entries()\cf6 ;\
    \cf4 assert.deepEqual([...actualEntries]\cf6 , \cf4 expectedEntries)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 '`forEach()` calls a callback for each value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 values = []\cf6 ;\
    \cf4 set.forEach(value => \{ values.push(value)\cf6 ; \cf4 \})\cf6 ;\
    \cf4 assert.deepEqual(values\cf6 , \cf4 api)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 '`has()` returns true if the given value is in the set'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 propertyName = \cf5 'add'\cf6 ;\
    \cf4 assert.equal(set.has(propertyName)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'returns an iterator that contains all values'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \cf2 // in order to be alike to `Map` `keys()` and `values()` are essentially the same thing for a `Set`. \
    \cf4 it(\cf5 '`keys()`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 allKeys = set.keys()\cf6 ;\
      \cf4 assert.deepEqual([...allKeys]\cf6 , \cf4 api)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 '`values()`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 allValues = set.values()\cf6 ;\
      \cf4 assert.deepEqual([...allValues]\cf6 , \cf4 api)\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 '`[Symbol.iterator]()`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 iteratorKey = Symbol.iterator\cf6 ;\
      \cf4 assert.deepEqual([...set[iteratorKey]()]\cf6 , \cf4 api)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}