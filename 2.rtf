{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 2: template strings - multiline\
// To do: make all tests pass, leave the asserts unchanged!\
\
\cf4 describe(\cf5 'template string, can contain multiline content'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  it(\cf5 'a normal string can`t span across multiple lines'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 normalString = \cf5 'line1' \cf4 + \
                        \cf5 '\cf6 \\n\cf5 ' \cf4 +\
                       \cf5 'line2'\cf6 ;\
    \cf4 assert.equal(normalString\cf6 , \cf5 'line1\cf6 \\n\cf5 line2'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \cf2 // Nota: cuidado con los espacios que nos dejan al hacer las multiples l\'edneas sin comillas\
  \cf4 it(\cf5 'wrapped in backticks it can span over multiple lines'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 templateString = \cf5 `line1\
line2`\cf6 ;\
    \cf4 assert.equal(templateString\cf6 , \cf5 'line1\cf6 \\n\cf5 line2'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'even over more than two lines'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 var 
\f0\b0 \cf4 multiline = \cf5 `line 1\
                     line 2\
                     line 3\
                     `\cf6 ;\
    \cf4 assert.equal(multiline.split(\cf5 '\cf6 \\n\cf5 '\cf4 ).length\cf6 , \cf7 4\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'and expressions inside work too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \
    
\f1\b \cf6 var 
\f0\b0 \cf4 x = \cf7 42\cf6 ;\
    \
    \cf4 it(\cf5 'like simple variables'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 var 
\f0\b0 \cf4 multiline = \cf5 `line 1\
          \cf4 $\{x\}\cf5 `\cf6 ;\
      \cf4 assert.equal(multiline\cf6 , \cf5 'line 1\cf6 \\n\cf5           42'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'also here spaces matter'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 var 
\f0\b0 \cf4 multiline = \cf5 `\
\cf4 $\{x\}\cf5 `\cf6 ;\
      \cf4 assert.equal(multiline\cf6 , \cf5 '\cf6 \\n\cf5 42'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}