{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 78: Promise - API overview\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Promise` API overview'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  it(\cf5 '`new Promise()` requires a function as param'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 param = () => \{\}\cf6 ;\
    \cf4 assert.doesNotThrow(() => \{ 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise(param)\cf6 ; \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'resolving a promise'\cf6 , \cf4 () => \{\
    \cf2 // reminder: the test passes when a fulfilled promise is returned\
    \cf4 it(\cf5 'via constructor parameter `new Promise((resolve) => \{ resolve(); \})`'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 param = (resolve) => \{ resolve()\cf6 ; \cf4 \}\cf6 ;\
      
\f1\b return new 
\f0\b0 \cf4 Promise(param)\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'using `Promise.resolve()`'\cf6 , \cf4 () => \{\
      
\f1\b \cf6 return 
\f0\b0 \cf4 Promise.resolve(\cf5 'all fine'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'a rejected promise'\cf6 , \cf4 () => \{\
    it(\cf5 'using the constructor parameter'\cf6 , \cf4 (done) => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = 
\f1\b \cf6 new 
\f0\b0 \cf4 Promise((resolve) => \{ reject()\cf6 ; \cf4 \})\cf6 ;\
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to be rejected.'\cf4 )))\
        .catch(() => done())\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'via `Promise.reject()`'\cf6 , \cf4 (done) => \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 promise = Promise.reject()\cf6 ;\
      \cf4 promise\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to be rejected.'\cf4 )))\
        .catch(() => done())\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  
\f1\b const 
\f0\b0 \cf4 resolvingPromise = Promise.resolve()\cf6 ;\
  
\f1\b const 
\f0\b0 \cf4 rejectingPromise = Promise.reject()\cf6 ;\
\
  \cf4 describe(\cf5 '`Promise.all()`'\cf6 , \cf4 () => \{\
    it(\cf5 '`Promise.all([p1, p2])` resolves when all promises resolve'\cf6 , \cf4 () =>\
      Promise.all([resolvingPromise\cf6 , \cf4 resolvingPromise])\
    )\cf6 ;\
    \cf4 it(\cf5 '`Promise.all([p1, p2])` rejects when a promise is rejected'\cf6 , \cf4 (done) => \{\
      Promise.all([resolvingPromise\cf6 , \cf4 rejectingPromise])\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to be rejected.'\cf4 )))\
        .catch(() => done())\
    \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 '`Promise.race()`'\cf6 , \cf4 () => \{\
    it(\cf5 '`Promise.race([p1, p2])` resolves when one of the promises resolves'\cf6 , \cf4 () =>\
      Promise.race([resolvingPromise\cf6 , \cf4 rejectingPromise])\
    )\cf6 ;\
    \cf4 it(\cf5 '`Promise.race([p1, p2])` rejects when one of the promises rejects'\cf6 , \cf4 (done) => \{\
      Promise.race([rejectingPromise\cf6 , \cf4 resolvingPromise])\
        .then(() => done(
\f1\b \cf6 new 
\f0\b0 \cf4 Error(\cf5 'The promise is expected to be rejected.'\cf4 )))\
        .catch(() => done())\
    \})\cf6 ;\
    \cf4 it(\cf5 '`Promise.race([p1, p2])` order matters (and timing)'\cf6 , \cf4 () =>\
      Promise.race([resolvingPromise\cf6 , \cf4 rejectingPromise])\
    )\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
\
}