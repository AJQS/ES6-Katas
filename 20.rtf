{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 20: spread - with-arrays\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'spread with arrays'\cf6 , \cf4 () => \{\
\
  it(\cf5 'extracts each array item'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 [a\cf6 , \cf4 b] = [...[\cf7 1\cf6 , \cf7 2\cf4 ]]\cf6 ;\
    \cf4 assert.equal(a\cf6 , \cf7 1\cf4 )\cf6 ;\
    \cf4 assert.equal(b\cf6 , \cf7 2\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'in combination with rest'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 [x\cf6 , \cf4 a\cf6 , \cf4 b\cf6 , \cf4 ...rest] = [...[\cf7 0\cf6 , \cf7 1\cf6 , \cf7 2\cf6 , \cf7 3\cf6 , \cf7 4\cf6 , \cf7 5\cf4 ]]\cf6 ;\
    \cf4 assert.equal(a\cf6 , \cf7 1\cf4 )\cf6 ;\
    \cf4 assert.equal(b\cf6 , \cf7 2\cf4 )\cf6 ;\
    \cf4 assert.deepEqual(rest\cf6 , \cf4 [\cf7 3\cf6 , \cf7 4\cf6 , \cf7 5\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'spreading into the rest'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 [x\cf6 ,\cf4 ...rest] = [...[\cf6 ,\cf7 1\cf6 , \cf7 2\cf6 , \cf7 3\cf6 , \cf7 4\cf6 , \cf7 5\cf4 ]]\cf6 ;\
    \cf4 assert.deepEqual(rest\cf6 , \cf4 [\cf7 1\cf6 , \cf7 2\cf6 , \cf7 3\cf6 , \cf7 4\cf6 , \cf7 5\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'used as function parameter'\cf6 , \cf4 () => \{\
    it(\cf5 'prefix with `...` to spread as function params'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 magicNumbers = [\cf7 1\cf6 , \cf7 2\cf4 ]\cf6 ;\
      
\f1\b const 
\f0\b0 \cf4 fn = (magicA\cf6 , \cf4 magicB) => \{\
        assert.deepEqual(magicNumbers[\cf7 0\cf4 ]\cf6 , \cf4 magicA)\cf6 ;\
        \cf4 assert.deepEqual(magicNumbers[\cf7 1\cf4 ]\cf6 , \cf4 magicB)\cf6 ;\
      \cf4 \}\cf6 ;\
      \cf4 fn(...magicNumbers)\cf6 ;\
    \cf4 \})\cf6 ;\
  \
    \cf4 it(\cf5 'pass an array of numbers to Math.max()'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 max = Math.max(...[\cf7 23\cf6 , \cf7 0\cf6 , \cf7 42\cf6 , \cf7 4\cf4 ])\cf6 ;\
      \cf4 assert.equal(max\cf6 , \cf7 42\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;  \
\cf4 \})\cf6 ;\
}