{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 57: Default parameters - basics\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'default parameters make function parameters more flexible'\cf6 , \cf4 () => \{\
\
  it(\cf5 'define it using an assignment to the parameter `function(param=1)\{\}`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 number = (int = \cf7 0\cf4 ) => int\cf6 ;\
    \
    \cf4 assert.equal(number()\cf6 , \cf7 0\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'it is used when undefined is passed'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 number = (int = \cf7 23\cf4 ) => int\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 param = undefined\cf6 ;\
    \
    \cf4 assert.equal(number(param)\cf6 , \cf7 23\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'it is not used when a value is given'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 function 
\f0\b0 \cf4 xhr(method = \cf5 'GET'\cf4 ) \{\
      
\f1\b \cf6 return 
\f0\b0 \cf4 method\cf6 ;  \
    \cf4 \}\
    \
    assert.equal(xhr(\cf5 'POST'\cf4 )\cf6 , \cf5 'POST'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'it is evaluated at run time'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 defaultValue\cf6 ;\
    
\f1\b function 
\f0\b0 \cf4 xhr(method = \cf5 `value: \cf4 $\{defaultValue\}\cf5 `\cf4 ) \{\
      
\f1\b \cf6 return 
\f0\b0 \cf4 method\cf6 ;  \
    \cf4 \}\
    defaultValue = \cf7 42\cf6 ;\
    \cf4 assert.equal(xhr()\cf6 , \cf5 'value: 42'\cf4 )\cf6 ;\
    \cf4 defaultValue = \cf7 23\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'it can also be a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 defaultValue = 
\f1\b \cf6 function
\f0\b0 \cf4 ()\{\}\cf6 ;\
    
\f1\b function 
\f0\b0 \cf4 fn(value = defaultValue()) \{\
      
\f1\b \cf6 return 
\f0\b0 \cf4 value\cf6 ;  \
    \cf4 \}\
    \
    assert.equal(fn()\cf6 , \cf4 defaultValue())\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}