{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 38: iterator/iterable - string. \
// The iterator protocol defines a standard way to produce a sequence of values (either finite or infinite).\
// read more at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\
\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'string is a built-in iterable object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  
\f1\b \cf6 const 
\f0\b0 \cf4 s = \cf5 'abc'\cf6 ;\
  \
  \cf4 describe(\cf5 'string is iterable'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'the string`s object key `Symbol.iterator` is a function'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 isA = 
\f1\b \cf6 typeof 
\f0\b0 \cf4 s[Symbol.iterator]\cf6 ;\
      \cf4 assert.equal(isA\cf6 , \cf5 'function'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'use `Array.from()` to make an array out of any iterable'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 arr = Array.from(s)\cf6 ;\
      \cf4 assert.deepEqual(arr\cf6 , \cf4 [\cf5 'a'\cf6 , \cf5 'b'\cf6 , \cf5 'c'\cf4 ])\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'a string`s iterator'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 iterator\cf6 ;\
    \cf4 beforeEach(
\f1\b \cf6 function
\f0\b0 \cf4 () \{\
      iterator = s[Symbol.iterator]()\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'has a special string representation'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 description = iterator.toString()\cf6 ;\
      \cf4 assert.equal(description\cf6 , \cf5 '[object String Iterator]'\cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 '`iterator.next()` returns an object according to the iterator protocol'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 value = iterator.next()\cf6 ;\
      \cf4 assert.deepEqual(value\cf6 , \cf4 \{done: 
\f1\b \cf6 false
\f0\b0 , \cf4 value: \cf5 'a'\cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'the after-last call to `iterator.next()` says done=true, no more elements'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
      iterator.next()\cf6 ;\
      \cf4 iterator.next()\cf6 ;\
      \cf4 iterator.next()\cf6 ;\
      \cf4 assert.equal(iterator.next().done\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}