{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh21000\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 46: Map.prototype.set()\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Map.prototype.set` adds a new element with key and value to a Map'\cf6 , 
\f1\b function
\f0\b0 \cf4 ()\{\
\
  it(\cf5 'simplest use case is `set(key, value)` and `get(key)`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(\cf5 'key'\cf6 ,\cf5 'value'\cf4 )\cf6 ;\
    \
    \cf4 assert.equal(map.get(\cf5 'key'\cf4 )\cf6 , \cf5 'value'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'the key can be a complex type too'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 noop = 
\f1\b \cf6 function
\f0\b0 \cf4 () \{\}\cf6 ;\
    
\f1\b let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(noop\cf6 , \cf5 'the real noop'\cf4 )\cf6 ;\
    \
    \cf4 assert.equal(map.get(noop)\cf6 , \cf5 'the real noop'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'calling `set()` again with the same key replaces the value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(\cf5 'key'\cf6 , \cf5 'value'\cf4 )\cf6 ;\
    \cf4 map.set(\cf5 'key'\cf6 , \cf5 'value1'\cf4 )\cf6 ;\
    \
    \cf4 assert.equal(map.get(\cf5 'key'\cf4 )\cf6 , \cf5 'value1'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 '`set()` returns the map object, it`s chainable'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 map = 
\f1\b \cf6 new 
\f0\b0 \cf4 Map()\cf6 ;\
    \cf4 map.set(\cf7 1\cf6 , \cf5 'one'\cf4 )\
       .set(\cf7 2\cf6 , \cf5 'two'\cf4 )\
       .set(\cf7 3\cf6 , \cf5 'three'\cf4 )\cf6 ;\
    \
    \cf4 assert.deepEqual([...map.keys()]\cf6 , \cf4 [\cf7 1\cf6 ,\cf7 2\cf6 ,\cf7 3\cf4 ])\cf6 ;\
    \cf4 assert.deepEqual([...map.values()]\cf6 , \cf4 [\cf5 'one'\cf6 , \cf5 'two'\cf6 , \cf5 'three'\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
\
}