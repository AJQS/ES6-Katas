{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 22: class - creation\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'class creation'\cf6 , \cf4 () => \{\
\
  it(\cf5 'is as simple as `class XXX \{\}`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 TestClass \{\}\
    \
    
\f1\b \cf6 const 
\f0\b0 \cf4 instance = 
\f1\b \cf6 new 
\f0\b0 \cf4 TestClass()\cf6 ;\
    \cf4 assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 instance\cf6 , \cf5 'object'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'class is block scoped'\cf6 , \cf4 () => \{\
    \{
\f1\b \cf6 class 
\f0\b0 \cf4 Inside \{\}\}\
    assert.equal(
\f1\b \cf6 typeof 
\f0\b0 \cf4 Inside\cf6 , \cf5 'undefined'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'special method is `constructor`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 User \{\
      constructor(id) \{\
        
\f1\b \cf6 this
\f0\b0 \cf4 .id = id\cf6 ;\
      \cf4 \}\
    \}\
    \
    
\f1\b \cf6 const 
\f0\b0 \cf4 user = 
\f1\b \cf6 new 
\f0\b0 \cf4 User(\cf7 42\cf4 )\cf6 ;\
    \cf4 assert.equal(user.id\cf6 , \cf7 42\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'defining a method is simple'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 User \{\
      writesTests() \{\
        
\f1\b \cf6 return false
\f0\b0 ;\
      \cf4 \}\
    \}\
    \
    
\f1\b \cf6 const 
\f0\b0 \cf4 notATester = 
\f1\b \cf6 new 
\f0\b0 \cf4 User()\cf6 ;\
    \cf4 assert.equal(notATester.writesTests()\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'multiple methods need no commas (opposed to object notation)'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 class 
\f0\b0 \cf4 User \{\
      wroteATest() \{ 
\f1\b \cf6 this
\f0\b0 \cf4 .everWroteATest = 
\f1\b \cf6 true
\f0\b0 ; \cf4 \}\
      isLazy() \{ 
\f1\b \cf6 return 
\f0\b0 \cf4 !
\f1\b \cf6 this
\f0\b0 \cf4 .everWroteATest \}\
    \}\
    \
    
\f1\b \cf6 const 
\f0\b0 \cf4 tester = 
\f1\b \cf6 new 
\f0\b0 \cf4 User()\cf6 ;\
    \cf4 assert.equal(tester.isLazy()\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 tester.wroteATest()\cf6 ;\
    \cf4 assert.equal(tester.isLazy()\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'anonymous class'\cf6 , \cf4 () => \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 classType = 
\f1\b \cf6 typeof class 
\f0\b0 \cf4 \{\}\cf6 ;\
    \cf4 assert.equal(classType\cf6 , \cf5 'function'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
}