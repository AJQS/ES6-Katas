{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 63: String - `includes()` \
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`string.includes()` finds string within another string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
\
  describe(\cf5 'find a single character'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'in a three char string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 searchString = \cf5 'xyz'\cf6 ;\
      \cf4 assert.equal(\cf5 'xyz'\cf4 .includes(searchString)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'reports false if character was not found'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 expected = 
\f1\b \cf6 false
\f0\b0 ;\
      \cf4 assert.equal(\cf5 'xyz'\cf4 .includes(\cf5 'abc'\cf4 )\cf6 , \cf4 expected)\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'find a string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'that matches exactly'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 findSome = findMe => \cf5 'xyz'\cf4 .includes(findMe)\cf6 ;\
      \cf4 assert.equal(findSome(\cf5 'xyz'\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'search for an empty string, is always true'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'in an empty string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 emptyString = \cf5 ''\cf6 ;\
      \cf4 assert.equal(\cf5 ''\cf4 .includes(emptyString)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'in `abc`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 actual = \cf5 'abc'\cf4 .includes(\cf5 ''\cf4 )\cf6 ;\
      \cf4 assert.equal(actual\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 describe(\cf5 'special/corner cases'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'search for `undefined` in a string fails'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 findInAbc = (what) => \cf5 'abc'\cf4 .includes(what)\cf6 ;\
      \cf4 assert.equal(findInAbc(
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf4 )\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'searches case-sensitive'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 findInAbc = (what) => \cf5 'abc'\cf4 .includes(what)\cf6 ;\
      \cf4 assert.equal(findInAbc(\cf5 'A'\cf4 )\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'must NOT be a regular expression'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 regExp = 
\f1\b \cf6 new 
\f0\b0 \cf4 RegExp()\cf6 ;\
      \cf4 assert.throws(() => \{\cf5 ''\cf4 .includes(regExp)\})\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 describe(\cf5 'coerces the searched "thing" into a string'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      it(\cf5 'e.g. from a number'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 actual = \cf5 '1234'\cf4 .includes(\cf7 4\cf4 )\cf6 ;\
        \cf4 assert.equal(actual\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \cf4 it(\cf5 'e.g. from an array'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 actual = \cf5 '1,2,3'\cf4 .includes([\cf7 1\cf6 ,\cf7 2\cf6 ,\cf7 3\cf4 ])\cf6 ;\
        \cf4 assert.equal(actual\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \cf4 it(\cf5 'e.g. from an object, with a `toString()` method'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 objWithToString = \{toString()\{ 
\f1\b \cf6 return 
\f0\b0 \cf7 1\cf4 \}\}\cf6 ;\
        \cf4 assert.equal(\cf5 '123'\cf4 .includes(objWithToString)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'takes a position from where to start searching'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    it(\cf5 'does not find `a` after position 1 in `abc`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 position = \cf7 1\cf6 ;\
      \cf4 assert.equal(\cf5 'abc'\cf4 .includes(\cf5 'a'\cf6 , \cf4 position)\cf6 , 
\f1\b false
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 it(\cf5 'even the position gets coerced'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 findAtPosition = (pos) => \cf5 'xyz'\cf4 .includes(\cf5 'z'\cf6 , \cf4 pos)\cf6 ; \
      \cf4 assert.equal(findAtPosition(\cf5 '2'\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
    \cf4 \})\cf6 ;\
    \cf4 describe(\cf5 'invalid positions get converted to 0'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      it(\cf5 'e.g. `undefined`'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 findAtPosition = (pos) => \cf5 'xyz'\cf4 .includes(\cf5 'x'\cf6 , \cf4 pos)\cf6 ; \
        \cf4 assert.equal(findAtPosition(
\f1\b \cf6 void 
\f0\b0 \cf7 0\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \cf4 it(\cf5 'negative numbers'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 findAtPosition = (pos) => \cf5 'xyz'\cf4 .includes(\cf5 'x'\cf6 , \cf4 pos)\cf6 ; \
        \cf4 assert.equal(findAtPosition(-\cf7 2\cf4 )\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
      \cf4 it(\cf5 'NaN'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
        
\f1\b \cf6 const 
\f0\b0 \cf4 findAtPosition = (pos) => \cf5 'xyz'\cf4 .includes(\cf5 'x'\cf6 , \cf4 pos)\cf6 ; \
        \cf4 assert.equal(findAtPosition(NaN)\cf6 , 
\f1\b true
\f0\b0 \cf4 )\cf6 ;\
      \cf4 \})\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
\
}