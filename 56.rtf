{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 56: Generator - Send function to a generator\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 'pass a function to a generator'\cf6 , \cf4 () => \{\
\
  it(\cf5 'the generator can receive a function as a value'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 fn = 
\f1\b \cf6 function
\f0\b0 \cf4 () \{\}\cf6 ;\
    
\f1\b function
\f0\b0 \cf4 * generatorFunction() \{\
      assert.equal(
\f1\b \cf6 yield null
\f0\b0 , \cf4 fn)\cf6 ; \cf2 // remember, don't touch this line\
    \cf4 \}\
    
\f1\b \cf6 let 
\f0\b0 \cf4 iterator = generatorFunction()\cf6 ;\
    \cf4 iterator.next()\cf6 ;\
    \cf4 iterator.next(fn)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'pass a function to the iterator, which calls it'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 fn = () => \cf7 2\cf6 ;\
    
\f1\b function
\f0\b0 \cf4 * generatorFunction() \{\
      
\f1\b \cf6 yield 
\f0\b0 \cf4 (
\f1\b \cf6 yield 
\f0\b0 \cf7 1\cf4 )()\cf6 ;\
    \cf4 \}\
    
\f1\b \cf6 var 
\f0\b0 \cf4 iterator = generatorFunction()\cf6 ;\
    
\f1\b var 
\f0\b0 \cf4 iteratedOver = [iterator.next().value\cf6 , \cf4 iterator.next(fn).value]\cf6 ;\
    \cf4 assert.deepEqual([\cf7 1\cf6 , \cf7 2\cf4 ]\cf6 , \cf4 iteratedOver)\cf6 ;\
  \cf4 \})\cf6 ;\
\
  \cf4 it(\cf5 'nesting yielded function calls'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 let 
\f0\b0 \cf4 fn = () => \cf7 2\cf6 ;\
    
\f1\b function
\f0\b0 \cf4 * generatorFunction() \{\
      
\f1\b \cf6 yield 
\f0\b0 \cf4 (
\f1\b \cf6 yield 
\f0\b0 \cf4 (
\f1\b \cf6 yield 
\f0\b0 \cf7 1\cf4 )())\cf6 ;\
    \cf4 \}\
    
\f1\b \cf6 var 
\f0\b0 \cf4 iterator = generatorFunction()\cf6 ;\
    
\f1\b var 
\f0\b0 \cf4 iteratedOver = [iterator.next().value\cf6 , \cf4 iterator.next(fn).value\cf6 ,\cf4 iterator.next(\cf7 3\cf4 ).value]\cf6 ;\
    \cf4 assert.deepEqual([\cf7 1\cf6 , \cf7 2\cf6 , \cf7 3\cf4 ]\cf6 , \cf4 iteratedOver)\cf6 ;\
  \cf4 \})\cf6 ;\
\
\cf4 \})\cf6 ;\
\
}