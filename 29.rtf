{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red0\green0\blue0;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;\red133\green96\blue154;\red254\green187\blue91;
}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgray\c0\c0;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c52157\c37647\c60392;\csgenericrgb\c99608\c73333\c35686;
}
\margl1440\margr1440\vieww33400\viewh19580\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 29: array - `Array.from` static method\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Array.from` converts an array-like object or list into an Array'\cf6 , \cf4 () => \{\
\
  
\f1\b \cf6 const 
\f0\b0 \cf4 arrayLike = \{\cf7 0\cf4 : \cf5 'one'\cf6 , \cf7 1\cf4 : \cf5 'two'\cf6 , \cf8 length\cf4 : \cf7 2\cf4 \}\cf6 ;\
  \
  \cf4 it(\cf5 'call `Array.from` with an array-like object'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 arr = Array.\cf9 from\cf4 (arrayLike)\cf6 ;\
    \
    \cf4 assert.deepEqual(arr\cf6 , \cf4 [\cf5 'one'\cf6 , \cf5 'two'\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'a DOM node`s classList object can be converted'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    document.\cf8 body\cf4 .\cf8 classList\cf4 .\cf9 add\cf4 (\cf5 'some'\cf4 )\cf6 ;\
    \cf4 document.\cf8 body\cf4 .\cf8 classList\cf4 .\cf9 add\cf4 (\cf5 'other'\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 classList = Array.\cf9 from\cf4 (document.\cf8 body\cf4 .\cf8 classList\cf4 )\cf6 ;\
\
    \cf4 assert.equal(\cf5 ''\cf4 +classList\cf6 , \cf5 ''\cf4 +[\cf5 'some'\cf6 , \cf5 'other'\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'convert a NodeList to an Array and `filter()` works on it'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 nodeList =document.\cf9 querySelectorAll\cf4 (\cf5 'body'\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 bodies =  Array.\cf9 from\cf4 (nodeList).\cf9 filter\cf4 ((node) => node === document.\cf8 body\cf4 )\cf6 ;\
    \
    \cf4 assert.deepEqual(bodies\cf6 , \cf4 [document.\cf8 body\cf4 ])\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 describe(\cf5 'custom conversion using a map function as second param'\cf6 , \cf4 () => \{\
    it(\cf5 'we can modify the value before putting it in the array'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 arr = Array.\cf9 from\cf4 (arrayLike\cf6 , \cf4 (value) => value.\cf9 toUpperCase\cf4 ())\cf6 ;\
      \cf4 assert.deepEqual(arr\cf6 , \cf4 [\cf5 'ONE'\cf6 , \cf5 'TWO'\cf4 ])\cf6 ;\
    \cf4 \})\cf6 ;\
    \
    \cf4 it(\cf5 'and we also get the object`s key as second parameter'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
      
\f1\b \cf6 const 
\f0\b0 \cf4 arr = Array.\cf9 from\cf4 (arrayLike\cf6 , \cf4 (value\cf6 ,\cf4 key) => \cf5 `\cf4 $\{key\}\cf5 =\cf4 $\{value\}\cf5 `\cf4 )\cf6 ;\
      \cf4 assert.deepEqual(arr\cf6 , \cf4 [\cf5 '0=one'\cf6 , \cf5 '1=two'\cf4 ])\cf6 ;\
    \cf4 \})\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
}