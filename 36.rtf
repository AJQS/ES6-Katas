{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf100
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red109\green109\blue109;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red191\green100\blue38;\red86\green132\blue173;}
{\*\expandedcolortbl;;\csgenericrgb\c42745\c42745\c42745;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c33725\c51765\c67843;}
\margl1440\margr1440\vieww12120\viewh20500\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs24 \cf2 \cb3 // 36: Symbol.keyFor - retrieves a shared symbol key from the global symbol registry\
// To do: make all tests pass, leave the assert lines unchanged!\
\
\cf4 describe(\cf5 '`Symbol.keyFor()` gets the symbol key for a given symbol'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
  \
  
\f1\b \cf6 const 
\f0\b0 \cf4 sym = Symbol.for(\cf5 'foo'\cf4 )\cf6 ;\
  
\f1\b const 
\f0\b0 \cf4 noSym = \cf5 'foo'\cf6 ;\
  \
  \cf4 it(\cf5 'pass the symbol to `keyFor()` and you get its key'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 key = Symbol.keyFor(sym)\cf6 ;\
    \
    \cf4 assert.equal(key\cf6 , \cf5 'foo'\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'local symbols are not in the runtime-wide registry'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    \cf2 // hint: `Symbol()` creates a local symbol!\
    
\f1\b \cf6 const 
\f0\b0 \cf4 localSymbol = Symbol(\cf5 'foo'\cf4 )\cf6 ;\
    
\f1\b const 
\f0\b0 \cf4 key = Symbol.keyFor(localSymbol)\cf6 ;\
    \
    \cf4 assert.equal(key\cf6 , 
\f1\b void 
\f0\b0 \cf7 0\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \cf4 it(\cf5 'predefined symbols are not in the runtime-wide registry either'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 const 
\f0\b0 \cf4 key = Symbol.keyFor(Symbol.iterator)\cf6 ;\
    \cf4 assert.equal(key\cf6 , 
\f1\b void 
\f0\b0 \cf7 0\cf4 )\cf6 ;\
  \cf4 \})\cf6 ;\
  \
  \
  \
  \cf4 it(\cf5 'for non-Symbols throws an error'\cf6 , 
\f1\b function
\f0\b0 \cf4 () \{\
    
\f1\b \cf6 function 
\f0\b0 \cf4 fn() \{\
      Symbol.keyFor(noSym)\cf6 ;\
    \cf4 \}\
    \
    assert.throws(fn)\cf6 ;\
  \cf4 \})\cf6 ;\
  \
\cf4 \})\cf6 ;\
\
}